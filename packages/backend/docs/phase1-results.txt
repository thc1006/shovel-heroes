
> shovel-backend@0.1.0 pretest
> node scripts/setup-test-db.js

[1m
============================================================[0m
[1m  Shovel Heroes - Test Database Setup[0m
[1m============================================================
[0m
[0mConfiguration:[0m
[0m  Host:     localhost:5432[0m
[0m  User:     postgres[0m
[0m  Database: shovelheroes_test
[0m
[34m[1/5] Checking PostgreSQL connection...[0m
[32m‚úì Connected to PostgreSQL: PostgreSQL 16.10 on x86_64-pc-linux-musl[0m
[34m[2/5] Checking if shovelheroes_test database exists...[0m
[0mDatabase shovelheroes_test exists, dropping it...[0m
[32m‚úì Dropped existing database: shovelheroes_test[0m
[34m[3/5] Creating test database: shovelheroes_test...[0m
[32m‚úì Test database shovelheroes_test created successfully[0m
[34m[4/5] Running migrations...[0m
[0m> shovel-backend@0.1.0 migrate:up
> node-pg-migrate up

> Migrating files:
> - 1696233600000_init
> - 1696237200000_rls
> - 1696240800000_audit
> - 1696244400000_create_all_tables
> - 1696248000000_expand_grids_table
> - 1696251600000_add_announcement_fields
> - 1696255200000_add_volunteer_registration_statuses
> - 1696258800000_add_grid_manager_column
> - 1696262400000_create_auth_system
> - 1696266000000_add_grid_code_unique_constraint
> - 1696269600000_auto_update_volunteer_count
> - 1696273200000_complete_rls_policies
> - 1696276800000_add_missing_columns
> - 1696280400000_modular_rls
> - 1696284000000_fix_announcements_fk
> - 1696287600000_add_cascade_constraints
### MIGRATION 1696233600000_init (UP) ###
-- Users and grids (minimal)
create table if not exists users (
  id uuid primary key default gen_random_uuid(),
  phone text,
  display_name text
);

create table if not exists grids (
  id uuid primary key default gen_random_uuid(),
  name text not null,
  area_id text
);

-- app.user_id GUC
create schema if not exists app;
create or replace function app.current_user_id() returns uuid language sql stable as $$
  select nullif(current_setting('app.user_id', true), '')::uuid
$$;

-- Minimal seed
;
INSERT INTO "public"."pgmigrations" (name, run_on) VALUES ('1696233600000_init', NOW());


### MIGRATION 1696237200000_rls (UP) ###
-- Enable row level security and policies
alter table grids enable row level security;

-- Example: allow select to all, but updates only to owner via a join (placeholder)
-- For demo, we keep read-only public access; extend as needed.
create policy grids_select_all on grids for select using (true);
;
INSERT INTO "public"."pgmigrations" (name, run_on) VALUES ('1696237200000_rls', NOW());


### MIGRATION 1696240800000_audit (UP) ###
-- Append-only audit table with trigger
create table if not exists audit_log (
  id bigserial primary key,
  at timestamptz not null default now(),
  table_name text not null,
  op text not null,
  row_id text,
  actor uuid,
  diff jsonb
);

create or replace function app.audit_trigger() returns trigger language plpgsql as $$
begin
  insert into audit_log(table_name, op, row_id, actor, diff)
  values (TG_TABLE_NAME, TG_OP, coalesce(NEW::text, OLD::text), app.current_user_id(), 
          case when TG_OP='INSERT' then to_jsonb(NEW)
               when TG_OP='UPDATE' then jsonb_build_object('old', to_jsonb(OLD), 'new', to_jsonb(NEW))
               else to_jsonb(OLD) end);
  return coalesce(NEW, OLD);
end;
$$;

-- Example: add trigger to grids
drop trigger if exists audit_grids on grids;
create trigger audit_grids after insert or update or delete on grids
for each row execute function app.audit_trigger();
;
INSERT INTO "public"."pgmigrations" (name, run_on) VALUES ('1696240800000_audit', NOW());


### MIGRATION 1696244400000_create_all_tables (UP) ###
-- Migration 0004: Create all missing tables for Shovel Heroes
-- Generated: 2025-10-02

-- Disaster Areas table
CREATE TABLE IF NOT EXISTS disaster_areas (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  description TEXT,
  location TEXT,
  severity TEXT CHECK (severity IN ('low', 'medium', 'high', 'critical')),
  status TEXT CHECK (status IN ('active', 'resolved', 'monitoring')) DEFAULT 'active',
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Announcements table
CREATE TABLE IF NOT EXISTS announcements (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  title TEXT NOT NULL,
  content TEXT NOT NULL,
  priority TEXT CHECK (priority IN ('low', 'normal', 'high', 'urgent')) DEFAULT 'normal',
  published BOOLEAN DEFAULT FALSE,
  author_id UUID REFERENCES users(id),
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Volunteers table
CREATE TABLE IF NOT EXISTS volunteers (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id),
  name TEXT NOT NULL,
  email TEXT,
  phone TEXT,
  skills TEXT[],
  availability TEXT,
  status TEXT CHECK (status IN ('available', 'assigned', 'unavailable')) DEFAULT 'available',
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Volunteer Registrations table
CREATE TABLE IF NOT EXISTS volunteer_registrations (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  volunteer_id UUID REFERENCES volunteers(id),
  grid_id UUID REFERENCES grids(id),
  disaster_area_id UUID REFERENCES disaster_areas(id),
  registration_date TIMESTAMPTZ DEFAULT NOW(),
  status TEXT CHECK (status IN ('pending', 'confirmed', 'cancelled')) DEFAULT 'pending',
  notes TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Supply Donations table
CREATE TABLE IF NOT EXISTS supply_donations (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  donor_name TEXT NOT NULL,
  donor_contact TEXT,
  item_type TEXT NOT NULL,
  quantity INTEGER DEFAULT 1,
  unit TEXT,
  disaster_area_id UUID REFERENCES disaster_areas(id),
  grid_id UUID REFERENCES grids(id),
  status TEXT CHECK (status IN ('pledged', 'received', 'distributed')) DEFAULT 'pledged',
  delivery_date TIMESTAMPTZ,
  notes TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Grid Discussions table
CREATE TABLE IF NOT EXISTS grid_discussions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  grid_id UUID REFERENCES grids(id),
  user_id UUID REFERENCES users(id),
  parent_id UUID REFERENCES grid_discussions(id), -- for threaded discussions
  message TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_disaster_areas_status ON disaster_areas(status);
CREATE INDEX IF NOT EXISTS idx_announcements_published ON announcements(published);
CREATE INDEX IF NOT EXISTS idx_volunteers_status ON volunteers(status);
CREATE INDEX IF NOT EXISTS idx_volunteer_registrations_status ON volunteer_registrations(status);
CREATE INDEX IF NOT EXISTS idx_supply_donations_status ON supply_donations(status);
CREATE INDEX IF NOT EXISTS idx_grid_discussions_grid_id ON grid_discussions(grid_id);

-- Add RLS policies for new tables
ALTER TABLE disaster_areas ENABLE ROW LEVEL SECURITY;
CREATE POLICY disaster_areas_select_all ON disaster_areas FOR SELECT USING (true);

ALTER TABLE announcements ENABLE ROW LEVEL SECURITY;
CREATE POLICY announcements_select_published ON announcements FOR SELECT USING (published = true);

ALTER TABLE volunteers ENABLE ROW LEVEL SECURITY;
CREATE POLICY volunteers_select_all ON volunteers FOR SELECT USING (true);

ALTER TABLE volunteer_registrations ENABLE ROW LEVEL SECURITY;
CREATE POLICY volunteer_registrations_select_own ON volunteer_registrations
  FOR SELECT USING (volunteer_id IN (SELECT id FROM volunteers WHERE user_id = app.current_user_id()));

ALTER TABLE supply_donations ENABLE ROW LEVEL SECURITY;
CREATE POLICY supply_donations_select_all ON supply_donations FOR SELECT USING (true);

ALTER TABLE grid_discussions ENABLE ROW LEVEL SECURITY;
CREATE POLICY grid_discussions_select_all ON grid_discussions FOR SELECT USING (true);

-- Add audit triggers for new tables
CREATE TRIGGER audit_disaster_areas AFTER INSERT OR UPDATE OR DELETE ON disaster_areas
FOR EACH ROW EXECUTE FUNCTION app.audit_trigger();

CREATE TRIGGER audit_announcements AFTER INSERT OR UPDATE OR DELETE ON announcements
FOR EACH ROW EXECUTE FUNCTION app.audit_trigger();

CREATE TRIGGER audit_volunteers AFTER INSERT OR UPDATE OR DELETE ON volunteers
FOR EACH ROW EXECUTE FUNCTION app.audit_trigger();

CREATE TRIGGER audit_volunteer_registrations AFTER INSERT OR UPDATE OR DELETE ON volunteer_registrations
FOR EACH ROW EXECUTE FUNCTION app.audit_trigger();

CREATE TRIGGER audit_supply_donations AFTER INSERT OR UPDATE OR DELETE ON supply_donations
FOR EACH ROW EXECUTE FUNCTION app.audit_trigger();

CREATE TRIGGER audit_grid_discussions AFTER INSERT OR UPDATE OR DELETE ON grid_discussions
FOR EACH ROW EXECUTE FUNCTION app.audit_trigger();

-- Insert some sample data for testing
INSERT INTO disaster_areas (name, description, location, severity, status) VALUES
  ('È¶¨Â§™ÈûçÊ∫™Â†∞Â°ûÊπñ', 'Â†∞Â°ûÊπñÊΩ∞Â†§Â∞éËá¥Âö¥ÈáçÊ∑πÊ∞¥', 'Ëä±ËìÆÁ∏£ÂÖâÂæ©ÈÑâ', 'critical', 'active'),
  ('ÂÖâÂæ©Â∏ÇÂçÄÊ∑πÊ∞¥ÂçÄ', 'Â∏ÇÂçÄ‰ΩéÁ™™Âú∞Â∏∂Ê∑πÊ∞¥', 'Ëä±ËìÆÁ∏£ÂÖâÂæ©ÈÑâÂ∏ÇÂçÄ', 'high', 'monitoring')
ON CONFLICT DO NOTHING;

INSERT INTO announcements (title, content, priority, published) VALUES
  ('ÂøóÂ∑•ÊãõÂãü‰∏≠', 'ÊÄ•ÈúÄÂøóÂ∑•ÂçîÂä©Ê∏ÖÊ∑§Â∑•‰ΩúÔºåË´ãÊúâÊÑèÈ°òËÄÖÂ†±Âêç', 'urgent', true),
  ('Áâ©Ë≥áÈúÄÊ±ÇÂÖ¨Âëä', 'ÁõÆÂâçÈúÄË¶ÅÊ∏ÖÊΩîÁî®ÂÖ∑„ÄÅÈ£≤Áî®Ê∞¥„ÄÅÂç≥È£üÈ£üÂìÅ', 'high', true)
ON CONFLICT DO NOTHING;
;
INSERT INTO "public"."pgmigrations" (name, run_on) VALUES ('1696244400000_create_all_tables', NOW());


### MIGRATION 1696248000000_expand_grids_table (UP) ###
-- Migration 0005: Expand grids table for map functionality
-- Generated: 2025-10-02
-- Purpose: Add all necessary fields for map display and grid management

-- Add new columns to grids table
ALTER TABLE grids
  ADD COLUMN IF NOT EXISTS code TEXT,
  ADD COLUMN IF NOT EXISTS grid_type TEXT CHECK (grid_type IN ('mud_disposal', 'manpower', 'supply_storage', 'accommodation', 'food_area')),
  ADD COLUMN IF NOT EXISTS status TEXT CHECK (status IN ('open', 'closed', 'completed', 'in_progress', 'preparing')) DEFAULT 'preparing',
  ADD COLUMN IF NOT EXISTS center_lat DECIMAL(10, 7),
  ADD COLUMN IF NOT EXISTS center_lng DECIMAL(10, 7),
  ADD COLUMN IF NOT EXISTS bounds JSONB,
  ADD COLUMN IF NOT EXISTS volunteer_needed INTEGER DEFAULT 0,
  ADD COLUMN IF NOT EXISTS volunteer_registered INTEGER DEFAULT 0,
  ADD COLUMN IF NOT EXISTS supplies_needed JSONB DEFAULT '[]'::jsonb,
  ADD COLUMN IF NOT EXISTS meeting_point TEXT,
  ADD COLUMN IF NOT EXISTS description TEXT,
  ADD COLUMN IF NOT EXISTS created_at TIMESTAMPTZ DEFAULT NOW(),
  ADD COLUMN IF NOT EXISTS updated_at TIMESTAMPTZ DEFAULT NOW();

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_grids_status ON grids(status);
CREATE INDEX IF NOT EXISTS idx_grids_grid_type ON grids(grid_type);
CREATE INDEX IF NOT EXISTS idx_grids_location ON grids(center_lat, center_lng);

-- Insert sample grid data for testing (ÂÖâÂæ©Âú∞ÂçÄ)
-- Grid coordinates are around ÂÖâÂæ©ÈÑâ (23.875, 121.578)

INSERT INTO grids (code, name, area_id, grid_type, status, center_lat, center_lng, bounds, volunteer_needed, volunteer_registered, meeting_point, description) VALUES
  -- Manpower grids (‰∫∫Âäõ‰ªªÂãô)
  ('A1', 'ÂÖâÂæ©Â∏ÇÂçÄÊ∏ÖÊ∑§ÂçÄA1', NULL, 'manpower', 'open', 23.8751, 121.5780,
   '{"north": 23.8761, "south": 23.8741, "east": 121.5790, "west": 121.5770}'::jsonb,
   20, 5, 'ÂÖâÂæ©ÈÑâÂÖ¨ÊâÄÂâçÂª£Â†¥', 'Â∏ÇÂçÄ‰∏ªË¶ÅÈÅìË∑ØÊ∏ÖÊ∑§‰ΩúÊ•≠'),

  ('A2', 'ÂÖâÂæ©Â∏ÇÂçÄÊ∏ÖÊ∑§ÂçÄA2', NULL, 'manpower', 'open', 23.8770, 121.5800,
   '{"north": 23.8780, "south": 23.8760, "east": 121.5810, "west": 121.5790}'::jsonb,
   15, 12, 'ÂÖâÂæ©ÂúãÂ∞è', '‰ΩèÂÆÖÂçÄÊ∏ÖÊ∑§‰ΩúÊ•≠'),

  ('A3', 'È¶¨Â§™ÈûçÊ∫™Ê≤øÂ≤∏Ê∏ÖÁêÜ', NULL, 'manpower', 'open', 23.8800, 121.5820,
   '{"north": 23.8810, "south": 23.8790, "east": 121.5830, "west": 121.5810}'::jsonb,
   30, 8, 'È¶¨Â§™ÈûçÊ©ãÈ†≠', 'Ê≤≥Â≤∏Ê∏ÖÁêÜËàáÂûÉÂúæÊ∏ÖÈÅã'),

  ('A4', 'Ëæ≤Áî∞Âæ©ÂéüÂçÄ', NULL, 'manpower', 'in_progress', 23.8730, 121.5760,
   '{"north": 23.8740, "south": 23.8720, "east": 121.5770, "west": 121.5750}'::jsonb,
   25, 20, 'ÂÖâÂæ©Á≥ñÂª†ÂÖ•Âè£', 'Ëæ≤Áî∞Ê∑§Ê≥•Ê∏ÖÁêÜ'),

  ('A5', 'Á§æÂçÄÂ∑∑ÈÅìÊ∏ÖÁêÜ', NULL, 'manpower', 'completed', 23.8720, 121.5790,
   '{"north": 23.8730, "south": 23.8710, "east": 121.5800, "west": 121.5780}'::jsonb,
   10, 10, 'ÂÖâÂæ©Ë°ó45Ëôü', 'Â∑≤ÂÆåÊàêÂ∑∑ÈÅìÊ∏ÖÊ∑§'),

  -- Mud disposal sites (Ê±°Ê≥•Êö´ÁΩÆÂ†¥)
  ('B1', 'ÂÖâÂæ©Êö´ÁΩÆÂ†¥1Ëôü', NULL, 'mud_disposal', 'open', 23.8820, 121.5850,
   '{"north": 23.8830, "south": 23.8810, "east": 121.5860, "west": 121.5840}'::jsonb,
   0, 0, 'Âè∞9Á∑öÊóÅÁ©∫Âú∞', 'ÂèØÂÆπÁ¥çÁ¥Ñ500Á´ãÊñπÂÖ¨Â∞∫'),

  ('B2', 'ÂÖâÂæ©Êö´ÁΩÆÂ†¥2Ëôü', NULL, 'mud_disposal', 'open', 23.8700, 121.5730,
   '{"north": 23.8710, "south": 23.8690, "east": 121.5740, "west": 121.5720}'::jsonb,
   0, 0, 'ÂÖâÂæ©Â∑•Ê•≠ÂçÄ', 'Â§ßÂûãÊ±°Ê≥•Êö´ÁΩÆÂçÄ'),

  -- Supply storage (Áâ©Ë≥áÂÅúÊîæËôï)
  ('C1', 'ÂÖâÂæ©Áâ©Ë≥áÈõÜÊï£‰∏≠ÂøÉ', NULL, 'supply_storage', 'open', 23.8760, 121.5795,
   '{"north": 23.8770, "south": 23.8750, "east": 121.5805, "west": 121.5785}'::jsonb,
   0, 0, 'ÂÖâÂæ©Âúã‰∏≠È´îËÇ≤È§®', 'Áâ©Ë≥áÊé•Êî∂ËàáÂàÜÁôº'),

  ('C2', 'ÂÖâÂæ©Áâ©Ë≥áÁ´ô2Ëôü', NULL, 'supply_storage', 'open', 23.8780, 121.5770,
   '{"north": 23.8790, "south": 23.8770, "east": 121.5780, "west": 121.5760}'::jsonb,
   0, 0, 'ÂÖâÂæ©Á§æÂçÄÊ¥ªÂãï‰∏≠ÂøÉ', 'ÂÇôÁî®Áâ©Ë≥áÁ´ô'),

  -- Accommodation (‰ΩèÂÆøÂú∞Èªû)
  ('D1', 'ÂøóÂ∑•‰ΩèÂÆøÈªû1', NULL, 'accommodation', 'open', 23.8740, 121.5785,
   '{"north": 23.8750, "south": 23.8730, "east": 121.5795, "west": 121.5775}'::jsonb,
   0, 0, 'ÂÖâÂæ©ÂúãÂ∞èÊïôÂÆ§', 'ÂèØÂÆπÁ¥ç50‰∫∫'),

  ('D2', 'ÂøóÂ∑•‰ΩèÂÆøÈªû2', NULL, 'accommodation', 'open', 23.8790, 121.5810,
   '{"north": 23.8800, "south": 23.8780, "east": 121.5820, "west": 121.5800}'::jsonb,
   0, 0, 'ÂÖâÂæ©Ê¥ªÂãï‰∏≠ÂøÉ', 'ÂèØÂÆπÁ¥ç30‰∫∫'),

  -- Food area (È†òÂêÉÈ£üÂçÄÂüü)
  ('E1', 'ÂøóÂ∑•Áî®È§êÂçÄ', NULL, 'food_area', 'open', 23.8755, 121.5782,
   '{"north": 23.8765, "south": 23.8745, "east": 121.5792, "west": 121.5772}'::jsonb,
   0, 0, 'ÂÖâÂæ©ÈÑâÂÖ¨ÊâÄ', 'Êèê‰æõ‰∏âÈ§êËàáÈ£≤Ê∞¥'),

  ('E2', 'ÂÇôÁî®Áî®È§êÂçÄ', NULL, 'food_area', 'open', 23.8775, 121.5805,
   '{"north": 23.8785, "south": 23.8765, "east": 121.5815, "west": 121.5795}'::jsonb,
   0, 0, 'ÂÖâÂæ©ÊïôÊúÉ', 'ÂÇôÁî®È§êÈªû‰æõÊáâÁ´ô')

ON CONFLICT (id) DO NOTHING;

-- Update supplies_needed for supply storage grids
UPDATE grids
SET supplies_needed = '[
  {"name": "Ê∏ÖÊΩîÁî®ÂÖ∑", "quantity": 100, "received": 45, "unit": "ÁµÑ"},
  {"name": "È£≤Áî®Ê∞¥", "quantity": 500, "received": 320, "unit": "Áì∂"},
  {"name": "Âç≥È£üÈ£üÂìÅ", "quantity": 200, "received": 150, "unit": "‰ªΩ"}
]'::jsonb
WHERE grid_type = 'supply_storage';
;
INSERT INTO "public"."pgmigrations" (name, run_on) VALUES ('1696248000000_expand_grids_table', NOW());


### MIGRATION 1696251600000_add_announcement_fields (UP) ###
-- Migration 0006: Add missing fields to announcements table
-- This adds fields that the frontend expects but were missing from the schema

-- Add new columns
ALTER TABLE announcements
  ADD COLUMN IF NOT EXISTS category TEXT DEFAULT 'safety'
    CHECK (category IN ('safety', 'equipment', 'center', 'external', 'contact')),
  ADD COLUMN IF NOT EXISTS is_pinned BOOLEAN DEFAULT FALSE,
  ADD COLUMN IF NOT EXISTS "order" INTEGER DEFAULT 0,
  ADD COLUMN IF NOT EXISTS contact_phone TEXT,
  ADD COLUMN IF NOT EXISTS external_links JSONB DEFAULT '[]'::jsonb,
  ADD COLUMN IF NOT EXISTS priority TEXT DEFAULT 'normal'
    CHECK (priority IN ('low', 'normal', 'high', 'urgent')),
  ADD COLUMN IF NOT EXISTS published BOOLEAN DEFAULT TRUE;

-- Set default category for existing announcements
UPDATE announcements
SET category = 'center'
WHERE category IS NULL;

-- Create indexes for filtering
CREATE INDEX IF NOT EXISTS idx_announcements_category ON announcements(category);
CREATE INDEX IF NOT EXISTS idx_announcements_pinned ON announcements(is_pinned);
CREATE INDEX IF NOT EXISTS idx_announcements_published ON announcements(published);
;
INSERT INTO "public"."pgmigrations" (name, run_on) VALUES ('1696251600000_add_announcement_fields', NOW());


### MIGRATION 1696255200000_add_volunteer_registration_statuses (UP) ###
-- Migration 0008: Add 'arrived' and 'completed' statuses to volunteer_registrations
-- Generated: 2025-10-02

-- Drop the existing CHECK constraint
ALTER TABLE volunteer_registrations
DROP CONSTRAINT IF EXISTS volunteer_registrations_status_check;

-- Add new CHECK constraint with all status values
ALTER TABLE volunteer_registrations
ADD CONSTRAINT volunteer_registrations_status_check
CHECK (status IN ('pending', 'confirmed', 'arrived', 'completed', 'cancelled'));

-- Add updated_at column if it doesn't exist
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT FROM information_schema.columns
    WHERE table_name = 'volunteer_registrations' AND column_name = 'updated_at'
  ) THEN
    ALTER TABLE volunteer_registrations
    ADD COLUMN updated_at TIMESTAMPTZ DEFAULT NOW();
  END IF;
END $$;

-- Create trigger to auto-update updated_at timestamp
CREATE OR REPLACE FUNCTION update_volunteer_registrations_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS volunteer_registrations_updated_at ON volunteer_registrations;
CREATE TRIGGER volunteer_registrations_updated_at
  BEFORE UPDATE ON volunteer_registrations
  FOR EACH ROW
  EXECUTE FUNCTION update_volunteer_registrations_updated_at();

-- Add RLS policy for UPDATE operations
-- Users can update their own registrations OR admins can update any
-- Note: Simplified version without app.is_admin() function - will be added in auth migration
DROP POLICY IF EXISTS volunteer_registrations_update_own ON volunteer_registrations;
CREATE POLICY volunteer_registrations_update_own ON volunteer_registrations
  FOR UPDATE
  USING (
    volunteer_id IN (SELECT id FROM volunteers WHERE user_id = app.current_user_id())
  )
  WITH CHECK (
    volunteer_id IN (SELECT id FROM volunteers WHERE user_id = app.current_user_id())
  );

-- Add comment for documentation
COMMENT ON CONSTRAINT volunteer_registrations_status_check ON volunteer_registrations IS
'Valid status values: pending (initial), confirmed (admin approved), arrived (checked in), completed (task done), cancelled (user or admin cancelled)';
;
INSERT INTO "public"."pgmigrations" (name, run_on) VALUES ('1696255200000_add_volunteer_registration_statuses', NOW());


### MIGRATION 1696258800000_add_grid_manager_column (UP) ###
-- Migration 0010: Add grid_manager_id to grids table
-- Purpose: Support RBAC for grid managers to view volunteer phone numbers
-- Created: 2025-10-03

-- Add grid_manager_id column to grids table
ALTER TABLE grids
  ADD COLUMN IF NOT EXISTS grid_manager_id UUID REFERENCES users(id) ON DELETE SET NULL;

-- Create index for better query performance
CREATE INDEX IF NOT EXISTS idx_grids_manager ON grids(grid_manager_id);

-- Add comment for documentation
COMMENT ON COLUMN grids.grid_manager_id IS 'User ID of the grid manager (ngo_coordinator role) who can view volunteer phone numbers for this grid';
;
INSERT INTO "public"."pgmigrations" (name, run_on) VALUES ('1696258800000_add_grid_manager_column', NOW());


### MIGRATION 1696262400000_create_auth_system (UP) ###
-- ============================================
-- ÈèüÂ≠êËã±ÈõÑ - Ë™çË≠âÁ≥ªÁµ±Ë≥áÊñôÂ∫´ Schema
-- Migration: 0011_create_auth_system
-- Created: 2025-10-02
-- Description: ALTER existing users table + create auth tables
-- ============================================

-- ÂïüÁî®ÂøÖË¶ÅÁöÑÊì¥ÂÖÖÂäüËÉΩ
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- ============================================
-- 1. Êõ¥Êñ∞ÁèæÊúâ users Ë°®
-- ============================================

-- Êñ∞Â¢ûË™çË≠âÊ¨Ñ‰Ωç
ALTER TABLE users ADD COLUMN IF NOT EXISTS phone_number VARCHAR(20) UNIQUE;
ALTER TABLE users ADD COLUMN IF NOT EXISTS email VARCHAR(255) UNIQUE;
ALTER TABLE users ADD COLUMN IF NOT EXISTS password_hash VARCHAR(255);

-- Êñ∞Â¢ûËßíËâ≤ËàáÁãÄÊÖã
ALTER TABLE users ADD COLUMN IF NOT EXISTS role VARCHAR(20) CHECK (role IN ('volunteer', 'victim', 'ngo_coordinator', 'regional_admin', 'data_analyst', 'super_admin'));
ALTER TABLE users ADD COLUMN IF NOT EXISTS status VARCHAR(20) DEFAULT 'active' CHECK (status IN ('active', 'suspended', 'pending_verification', 'inactive'));

-- ÂÄãË≥áÊ¨Ñ‰ΩçÔºàÂä†ÂØÜÂ≠òÂÑ≤Ôºâ
ALTER TABLE users ADD COLUMN IF NOT EXISTS full_name_encrypted BYTEA;
ALTER TABLE users ADD COLUMN IF NOT EXISTS emergency_contact_encrypted BYTEA;

-- È©óË≠âÁãÄÊÖã
ALTER TABLE users ADD COLUMN IF NOT EXISTS phone_verified BOOLEAN DEFAULT FALSE;
ALTER TABLE users ADD COLUMN IF NOT EXISTS email_verified BOOLEAN DEFAULT FALSE;
ALTER TABLE users ADD COLUMN IF NOT EXISTS identity_verified BOOLEAN DEFAULT FALSE;
ALTER TABLE users ADD COLUMN IF NOT EXISTS verified_by UUID REFERENCES users(id);
ALTER TABLE users ADD COLUMN IF NOT EXISTS verified_at TIMESTAMP WITH TIME ZONE;

-- ÈõôÂõ†Á¥†Ë™çË≠â
ALTER TABLE users ADD COLUMN IF NOT EXISTS totp_secret VARCHAR(255);
ALTER TABLE users ADD COLUMN IF NOT EXISTS totp_enabled BOOLEAN DEFAULT FALSE;
ALTER TABLE users ADD COLUMN IF NOT EXISTS backup_codes TEXT[];

-- ÁôªÂÖ•ÂÆâÂÖ®
ALTER TABLE users ADD COLUMN IF NOT EXISTS last_login_at TIMESTAMP WITH TIME ZONE;
ALTER TABLE users ADD COLUMN IF NOT EXISTS last_login_ip INET;
ALTER TABLE users ADD COLUMN IF NOT EXISTS failed_login_attempts INT DEFAULT 0;
ALTER TABLE users ADD COLUMN IF NOT EXISTS locked_until TIMESTAMP WITH TIME ZONE;

-- ÊôÇÈñìÊà≥Ë®ò
ALTER TABLE users ADD COLUMN IF NOT EXISTS created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW();
ALTER TABLE users ADD COLUMN IF NOT EXISTS updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW();

-- Á¥¢ÂºïÂÑ™Âåñ
CREATE INDEX IF NOT EXISTS idx_users_phone ON users(phone_number) WHERE phone_number IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_users_email ON users(email) WHERE email IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_users_role ON users(role);
CREATE INDEX IF NOT EXISTS idx_users_status ON users(status);

-- Ëá™ÂãïÊõ¥Êñ∞ updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS update_users_updated_at ON users;
CREATE TRIGGER update_users_updated_at
  BEFORE UPDATE ON users
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

-- ============================================
-- 2. ÂøóÂ∑•ÂÄã‰∫∫Ê™îÊ°à
-- ============================================

CREATE TABLE IF NOT EXISTS volunteer_profiles (
  user_id UUID PRIMARY KEY REFERENCES users(id) ON DELETE CASCADE,
  skills TEXT[] DEFAULT '{}',
  organization VARCHAR(255),
  total_hours DECIMAL(10,2) DEFAULT 0,
  total_tasks INT DEFAULT 0,
  completed_tasks INT DEFAULT 0,
  rating DECIMAL(3,2),
  review_count INT DEFAULT 0,
  preferred_areas TEXT[],
  availability JSONB,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_volunteer_skills ON volunteer_profiles USING GIN(skills);
CREATE INDEX IF NOT EXISTS idx_volunteer_organization ON volunteer_profiles(organization);

DROP TRIGGER IF EXISTS update_volunteer_profiles_updated_at ON volunteer_profiles;
CREATE TRIGGER update_volunteer_profiles_updated_at
  BEFORE UPDATE ON volunteer_profiles
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

-- ============================================
-- 3. ÂèóÁÅΩÊà∂ÂÄã‰∫∫Ê™îÊ°à
-- ============================================

CREATE TABLE IF NOT EXISTS victim_profiles (
  user_id UUID PRIMARY KEY REFERENCES users(id) ON DELETE CASCADE,
  address_encrypted BYTEA,
  latitude DECIMAL(10,8),
  longitude DECIMAL(11,8),
  damage_description TEXT,
  damage_level VARCHAR(20) CHECK (damage_level IN ('minor', 'moderate', 'severe', 'critical')),
  damage_photos TEXT[],
  verification_status VARCHAR(20) DEFAULT 'pending' CHECK (verification_status IN ('pending', 'approved', 'rejected', 'need_more_info')),
  verification_notes TEXT,
  reviewed_by UUID REFERENCES users(id),
  reviewed_at TIMESTAMP WITH TIME ZONE,
  needs_met BOOLEAN DEFAULT FALSE,
  priority_level INT DEFAULT 3 CHECK (priority_level BETWEEN 1 AND 5),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_victim_status ON victim_profiles(verification_status);
CREATE INDEX IF NOT EXISTS idx_victim_priority ON victim_profiles(priority_level);
CREATE INDEX IF NOT EXISTS idx_victim_location ON victim_profiles(latitude, longitude);

DROP TRIGGER IF EXISTS update_victim_profiles_updated_at ON victim_profiles;
CREATE TRIGGER update_victim_profiles_updated_at
  BEFORE UPDATE ON victim_profiles
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

-- ============================================
-- 4. OTP È©óË≠âÁ¢ºÁÆ°ÁêÜ
-- ============================================

CREATE TABLE IF NOT EXISTS otp_codes (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  identifier VARCHAR(255) NOT NULL,
  code_hash VARCHAR(255) NOT NULL,
  purpose VARCHAR(50) NOT NULL CHECK (purpose IN ('login', 'reset_password', '2fa', 'phone_verification', 'email_verification')),
  expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
  used_at TIMESTAMP WITH TIME ZONE,
  attempts INT DEFAULT 0,
  max_attempts INT DEFAULT 5,
  ip_address INET,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_otp_identifier ON otp_codes(identifier, purpose, expires_at);
CREATE INDEX IF NOT EXISTS idx_otp_expires ON otp_codes(expires_at);

-- ============================================
-- 5. Session ÁÆ°ÁêÜ
-- ============================================

CREATE TABLE IF NOT EXISTS sessions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  token_hash VARCHAR(255) NOT NULL UNIQUE,
  refresh_token_hash VARCHAR(255) UNIQUE,
  ip_address INET,
  user_agent TEXT,
  device_fingerprint VARCHAR(255),
  device_trusted BOOLEAN DEFAULT FALSE,
  expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
  refresh_expires_at TIMESTAMP WITH TIME ZONE,
  last_activity_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_sessions_user ON sessions(user_id);
CREATE INDEX IF NOT EXISTS idx_sessions_token ON sessions(token_hash);
CREATE INDEX IF NOT EXISTS idx_sessions_expires ON sessions(expires_at);

-- ============================================
-- 6. Ê¨äÈôêÁÆ°ÁêÜ
-- ============================================

CREATE TABLE IF NOT EXISTS permissions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(100) NOT NULL UNIQUE,
  description TEXT,
  resource_type VARCHAR(50),
  action VARCHAR(50),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS role_permissions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  role VARCHAR(20) NOT NULL,
  permission_id UUID NOT NULL REFERENCES permissions(id) ON DELETE CASCADE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(role, permission_id)
);

CREATE INDEX IF NOT EXISTS idx_role_permissions_role ON role_permissions(role);

CREATE TABLE IF NOT EXISTS user_permissions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  permission_id UUID NOT NULL REFERENCES permissions(id) ON DELETE CASCADE,
  granted BOOLEAN DEFAULT TRUE,
  granted_by UUID REFERENCES users(id),
  granted_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  expires_at TIMESTAMP WITH TIME ZONE,
  UNIQUE(user_id, permission_id)
);

CREATE INDEX IF NOT EXISTS idx_user_permissions_user ON user_permissions(user_id);

-- ============================================
-- 7. Á®ΩÊ†∏Êó•Ë™å
-- ============================================

CREATE TABLE IF NOT EXISTS audit_logs (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id),
  user_role VARCHAR(20),
  action VARCHAR(100) NOT NULL,
  resource_type VARCHAR(50),
  resource_id UUID,
  old_value JSONB,
  new_value JSONB,
  ip_address INET,
  user_agent TEXT,
  request_method VARCHAR(10),
  request_path TEXT,
  request_data JSONB,
  response_status INT,
  is_suspicious BOOLEAN DEFAULT FALSE,
  risk_level VARCHAR(20) CHECK (risk_level IN ('low', 'medium', 'high', 'critical')),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_audit_logs_user ON audit_logs(user_id, created_at DESC);
CREATE INDEX IF NOT EXISTS idx_audit_logs_action ON audit_logs(action, created_at DESC);
CREATE INDEX IF NOT EXISTS idx_audit_logs_resource ON audit_logs(resource_type, resource_id);
CREATE INDEX IF NOT EXISTS idx_audit_logs_suspicious ON audit_logs(is_suspicious) WHERE is_suspicious = TRUE;
CREATE INDEX IF NOT EXISTS idx_audit_logs_created ON audit_logs(created_at DESC);

-- ============================================
-- 8. ÁôªÂÖ•Ê≠∑Âè≤Ë®òÈåÑ
-- ============================================

CREATE TABLE IF NOT EXISTS login_history (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  success BOOLEAN NOT NULL,
  failure_reason VARCHAR(100),
  ip_address INET,
  user_agent TEXT,
  device_type VARCHAR(50),
  browser VARCHAR(50),
  os VARCHAR(50),
  location_country VARCHAR(2),
  location_city VARCHAR(100),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_login_history_user ON login_history(user_id, created_at DESC);
CREATE INDEX IF NOT EXISTS idx_login_history_ip ON login_history(ip_address);
CREATE INDEX IF NOT EXISTS idx_login_history_failed ON login_history(success) WHERE success = FALSE;

-- ============================================
-- 9. È†êË®≠Ê¨äÈôêË≥áÊñô
-- ============================================

INSERT INTO permissions (name, description, resource_type, action) VALUES
  ('view_own_profile', 'Êü•ÁúãËá™Â∑±ÁöÑÂÄã‰∫∫Ë≥áÊñô', 'volunteer', 'read'),
  ('update_own_profile', 'Êõ¥Êñ∞Ëá™Â∑±ÁöÑÂÄã‰∫∫Ë≥áÊñô', 'volunteer', 'update'),
  ('view_tasks', 'Êü•Áúã‰ªªÂãôÂàóË°®', 'task', 'read'),
  ('accept_task', 'Êé•Âèó‰ªªÂãô', 'task', 'update'),
  ('upload_task_photo', '‰∏äÂÇ≥‰ªªÂãôÁÖßÁâá', 'task', 'create'),
  ('create_help_request', 'Âª∫Á´ãÊïëÊè¥Ë´ãÊ±Ç', 'help_request', 'create'),
  ('view_own_requests', 'Êü•ÁúãËá™Â∑±ÁöÑË´ãÊ±Ç', 'help_request', 'read'),
  ('update_own_request', 'Êõ¥Êñ∞Ëá™Â∑±ÁöÑË´ãÊ±Ç', 'help_request', 'update'),
  ('view_all_volunteers', 'Êü•ÁúãÊâÄÊúâÂøóÂ∑•', 'volunteer', 'read'),
  ('assign_tasks', 'ÂàÜÈÖç‰ªªÂãô', 'task', 'create'),
  ('update_tasks', 'Êõ¥Êñ∞‰ªªÂãôÁãÄÊÖã', 'task', 'update'),
  ('view_all_requests', 'Êü•ÁúãÊâÄÊúâÊïëÊè¥Ë´ãÊ±Ç', 'help_request', 'read'),
  ('approve_victim', 'ÂØ©Ê†∏ÂèóÁÅΩÊà∂', 'victim', 'update'),
  ('manage_users', 'ÁÆ°ÁêÜ‰ΩøÁî®ËÄÖ', 'user', '*'),
  ('view_audit_logs', 'Êü•ÁúãÁ®ΩÊ†∏Êó•Ë™å', 'audit', 'read'),
  ('manage_permissions', 'ÁÆ°ÁêÜÊ¨äÈôê', 'permission', '*'),
  ('export_data', 'ÂåØÂá∫Ë≥áÊñô', 'data', 'read')
ON CONFLICT (name) DO NOTHING;

-- ËßíËâ≤È†êË®≠Ê¨äÈôê
INSERT INTO role_permissions (role, permission_id)
SELECT 'volunteer', id FROM permissions WHERE name IN (
  'view_own_profile', 'update_own_profile', 'view_tasks', 'accept_task', 'upload_task_photo'
)
ON CONFLICT DO NOTHING;

INSERT INTO role_permissions (role, permission_id)
SELECT 'victim', id FROM permissions WHERE name IN (
  'view_own_profile', 'update_own_profile', 'create_help_request', 'view_own_requests', 'update_own_request'
)
ON CONFLICT DO NOTHING;

INSERT INTO role_permissions (role, permission_id)
SELECT 'ngo_coordinator', id FROM permissions WHERE name IN (
  'view_own_profile', 'update_own_profile',
  'view_all_volunteers', 'assign_tasks', 'update_tasks',
  'view_all_requests', 'approve_victim'
)
ON CONFLICT DO NOTHING;

INSERT INTO role_permissions (role, permission_id)
SELECT 'super_admin', id FROM permissions
ON CONFLICT DO NOTHING;

-- ============================================
-- 10. RLS (Row Level Security) ÊîøÁ≠ñ
-- ============================================

ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE volunteer_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE victim_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE sessions ENABLE ROW LEVEL SECURITY;
ALTER TABLE audit_logs ENABLE ROW LEVEL SECURITY;

-- ‰ΩøÁî®ËÄÖÂè™ËÉΩÊü•ÁúãËá™Â∑±ÁöÑË≥áÊñô
DROP POLICY IF EXISTS users_self_access ON users;
CREATE POLICY users_self_access ON users
  FOR SELECT
  USING (id = current_setting('app.user_id', true)::UUID);

-- ÁÆ°ÁêÜÂì°ÂèØ‰ª•Êü•ÁúãÊâÄÊúâ‰ΩøÁî®ËÄÖ
DROP POLICY IF EXISTS users_admin_access ON users;
CREATE POLICY users_admin_access ON users
  FOR ALL
  USING (
    EXISTS (
      SELECT 1 FROM users u
      WHERE u.id = current_setting('app.user_id', true)::UUID
      AND u.role IN ('super_admin', 'ngo_coordinator')
    )
  );

-- ÂøóÂ∑•Âè™ËÉΩÊü•ÁúãËá™Â∑±ÁöÑ profile
DROP POLICY IF EXISTS volunteer_self_access ON volunteer_profiles;
CREATE POLICY volunteer_self_access ON volunteer_profiles
  FOR ALL
  USING (user_id = current_setting('app.user_id', true)::UUID);

-- NGO ÂçîË™øËÄÖÂèØ‰ª•Êü•ÁúãÊâÄÊúâÂøóÂ∑• profile
DROP POLICY IF EXISTS volunteer_ngo_access ON volunteer_profiles;
CREATE POLICY volunteer_ngo_access ON volunteer_profiles
  FOR SELECT
  USING (
    EXISTS (
      SELECT 1 FROM users u
      WHERE u.id = current_setting('app.user_id', true)::UUID
      AND u.role IN ('ngo_coordinator', 'super_admin')
    )
  );

-- ============================================
-- 11. ËºîÂä©ÂáΩÊï∏
-- ============================================

CREATE OR REPLACE FUNCTION encrypt_pii(plaintext TEXT, secret TEXT DEFAULT 'your-secret-key')
RETURNS BYTEA AS $$
BEGIN
  RETURN pgp_sym_encrypt(plaintext, secret);
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION decrypt_pii(ciphertext BYTEA, secret TEXT DEFAULT 'your-secret-key')
RETURNS TEXT AS $$
BEGIN
  RETURN pgp_sym_decrypt(ciphertext, secret);
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION user_has_permission(
  p_user_id UUID,
  p_permission_name VARCHAR
)
RETURNS BOOLEAN AS $$
BEGIN
  RETURN EXISTS (
    SELECT 1 FROM users u
    LEFT JOIN role_permissions rp ON rp.role = u.role
    LEFT JOIN permissions p ON p.id = rp.permission_id
    LEFT JOIN user_permissions up ON up.user_id = u.id AND up.permission_id = p.id
    WHERE u.id = p_user_id
    AND p.name = p_permission_name
    AND (up.granted IS NULL OR up.granted = TRUE)
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
;
INSERT INTO "public"."pgmigrations" (name, run_on) VALUES ('1696262400000_create_auth_system', NOW());


### MIGRATION 1696266000000_add_grid_code_unique_constraint (UP) ###
-- Migration 0012: Add UNIQUE constraint to grids.code
-- Generated: 2025-10-02
-- Purpose: Ensure grid codes are unique for conflict detection

-- Add UNIQUE constraint to code field
-- This will enable proper 409 Conflict responses when duplicate codes are submitted
ALTER TABLE grids
  ADD CONSTRAINT grids_code_key UNIQUE (code);

-- Create index for code lookups (automatically created by UNIQUE constraint, but explicit for clarity)
-- CREATE UNIQUE INDEX IF NOT EXISTS idx_grids_code ON grids(code);
;
INSERT INTO "public"."pgmigrations" (name, run_on) VALUES ('1696266000000_add_grid_code_unique_constraint', NOW());


### MIGRATION 1696269600000_auto_update_volunteer_count (UP) ###
-- Migration 0013: Ëá™ÂãïÊõ¥Êñ∞Á∂≤Ê†ºÂøóÂ∑•‰∫∫Êï∏
-- Description: Áï∂ÂøóÂ∑•Â†±ÂêçÊàñÂèñÊ∂àÊôÇÔºåËá™ÂãïÂ¢ûÊ∏õ grids.volunteer_registered
-- Created: 2025-10-02

-- Âª∫Á´ãËß∏ÁôºÂáΩÊï∏
CREATE OR REPLACE FUNCTION update_grid_volunteer_count()
RETURNS TRIGGER AS $$
BEGIN
  IF TG_OP = 'INSERT' THEN
    -- Êñ∞Â¢ûÂ†±ÂêçÔºövolunteer_registered +1
    UPDATE grids
    SET volunteer_registered = volunteer_registered + 1,
        updated_at = NOW()
    WHERE id = NEW.grid_id;
    RETURN NEW;

  ELSIF TG_OP = 'DELETE' THEN
    -- ÂèñÊ∂àÂ†±ÂêçÔºövolunteer_registered -1Ôºà‰∏çÂ∞èÊñº0Ôºâ
    UPDATE grids
    SET volunteer_registered = GREATEST(0, volunteer_registered - 1),
        updated_at = NOW()
    WHERE id = OLD.grid_id;
    RETURN OLD;

  ELSIF TG_OP = 'UPDATE' THEN
    -- Â¶ÇÊûú grid_id ÊîπËÆäÔºàÁΩïË¶ãÊÉÖÊ≥ÅÔºâ
    IF OLD.grid_id != NEW.grid_id THEN
      -- ËàäÁ∂≤Ê†º -1
      UPDATE grids
      SET volunteer_registered = GREATEST(0, volunteer_registered - 1),
          updated_at = NOW()
      WHERE id = OLD.grid_id;

      -- Êñ∞Á∂≤Ê†º +1
      UPDATE grids
      SET volunteer_registered = volunteer_registered + 1,
          updated_at = NOW()
      WHERE id = NEW.grid_id;
    END IF;
    RETURN NEW;
  END IF;

  RETURN NULL;
END;
$$ LANGUAGE plpgsql;

-- Âª∫Á´ãËß∏ÁôºÂô®
DROP TRIGGER IF EXISTS trg_volunteer_registration_count ON volunteer_registrations;

CREATE TRIGGER trg_volunteer_registration_count
AFTER INSERT OR DELETE OR UPDATE OF grid_id ON volunteer_registrations
FOR EACH ROW
EXECUTE FUNCTION update_grid_volunteer_count();

-- È©óË≠âÁèæÊúâË≥áÊñôÁöÑË®àÊï∏Ê≠£Á¢∫ÊÄßÔºà‰∏ÄÊ¨°ÊÄß‰øÆÂæ©Ôºâ
UPDATE grids g
SET volunteer_registered = (
  SELECT COUNT(*)
  FROM volunteer_registrations vr
  WHERE vr.grid_id = g.id
);

-- È©óË≠âËß∏ÁôºÂô®ÂÆâË£ùÊàêÂäü
DO $$
BEGIN
  IF EXISTS (
    SELECT 1 FROM pg_trigger
    WHERE tgname = 'trg_volunteer_registration_count'
  ) THEN
    RAISE NOTICE 'Trigger trg_volunteer_registration_count created successfully';
  ELSE
    RAISE EXCEPTION 'Failed to create trigger trg_volunteer_registration_count';
  END IF;
END $$;
;
INSERT INTO "public"."pgmigrations" (name, run_on) VALUES ('1696269600000_auto_update_volunteer_count', NOW());


### MIGRATION 1696273200000_complete_rls_policies (UP) ###
-- ============================================
-- Migration 0009: Comprehensive RLS Policies
-- Created: 2025-10-02
-- Description: Complete Row-Level Security policies for all tables
-- ============================================
--
-- This migration establishes comprehensive RLS policies across all tables
-- following role-based access control principles:
--   - volunteer: Basic user with task access
--   - victim: Request help and view own data
--   - ngo_coordinator: Manage volunteers and tasks
--   - regional_admin: Regional oversight and management
--   - data_analyst: Read-only analytics access
--   - super_admin: Full system access
-- ============================================

-- ============================================
-- Helper Functions
-- ============================================

-- Function to check if user has one of the required roles
CREATE OR REPLACE FUNCTION user_has_role(required_roles TEXT[])
RETURNS BOOLEAN AS $$
DECLARE
  current_user_id UUID;
  current_user_role TEXT;
BEGIN
  -- Get current user ID from session context
  BEGIN
    current_user_id := current_setting('app.user_id', true)::UUID;
  EXCEPTION WHEN OTHERS THEN
    RETURN FALSE;
  END;

  -- Return false if no user context
  IF current_user_id IS NULL THEN
    RETURN FALSE;
  END IF;

  -- Get user role
  SELECT role INTO current_user_role
  FROM users
  WHERE id = current_user_id;

  -- Check if user role is in required roles
  RETURN current_user_role = ANY(required_roles);
END;
$$ LANGUAGE plpgsql SECURITY DEFINER STABLE;

-- Function to get current user ID safely
CREATE OR REPLACE FUNCTION get_current_user_id()
RETURNS UUID AS $$
BEGIN
  RETURN current_setting('app.user_id', true)::UUID;
EXCEPTION WHEN OTHERS THEN
  RETURN NULL;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER STABLE;

-- Function to check if user is admin (coordinator or above)
CREATE OR REPLACE FUNCTION is_admin()
RETURNS BOOLEAN AS $$
BEGIN
  RETURN user_has_role(ARRAY['ngo_coordinator', 'regional_admin', 'super_admin']);
END;
$$ LANGUAGE plpgsql SECURITY DEFINER STABLE;

-- ============================================
-- 1. GRIDS Table Policies
-- ============================================

-- Drop existing overly permissive policy
DROP POLICY IF EXISTS grids_select_all ON grids;

-- Enable RLS
ALTER TABLE grids ENABLE ROW LEVEL SECURITY;

-- SELECT: Everyone can view grids (public map data)
CREATE POLICY grids_select_public ON grids
  FOR SELECT
  USING (true);

-- INSERT: Only coordinators and admins
CREATE POLICY grids_insert_admin ON grids
  FOR INSERT
  WITH CHECK (
    user_has_role(ARRAY['ngo_coordinator', 'regional_admin', 'super_admin'])
  );

-- UPDATE: Only coordinators and admins
CREATE POLICY grids_update_admin ON grids
  FOR UPDATE
  USING (
    user_has_role(ARRAY['ngo_coordinator', 'regional_admin', 'super_admin'])
  );

-- DELETE: Only super admins
CREATE POLICY grids_delete_super_admin ON grids
  FOR DELETE
  USING (
    user_has_role(ARRAY['super_admin'])
  );

-- ============================================
-- 2. ANNOUNCEMENTS Table Policies
-- ============================================

-- Enable RLS
ALTER TABLE announcements ENABLE ROW LEVEL SECURITY;

-- Drop old policies
DROP POLICY IF EXISTS announcements_select_published ON announcements;

-- SELECT: Everyone can view published announcements
CREATE POLICY announcements_select_public ON announcements
  FOR SELECT
  USING (published = true OR is_admin());

-- INSERT: Only coordinators and admins can create
CREATE POLICY announcements_insert_admin ON announcements
  FOR INSERT
  WITH CHECK (
    user_has_role(ARRAY['ngo_coordinator', 'regional_admin', 'super_admin'])
  );

-- UPDATE: Author or admins can update
CREATE POLICY announcements_update_author_or_admin ON announcements
  FOR UPDATE
  USING (
    author_id = get_current_user_id() OR
    user_has_role(ARRAY['ngo_coordinator', 'regional_admin', 'super_admin'])
  );

-- DELETE: Author or super admin can delete
CREATE POLICY announcements_delete_author_or_super_admin ON announcements
  FOR DELETE
  USING (
    author_id = get_current_user_id() OR
    user_has_role(ARRAY['super_admin'])
  );

-- ============================================
-- 3. VOLUNTEERS Table Policies
-- ============================================

-- Enable RLS
ALTER TABLE volunteers ENABLE ROW LEVEL SECURITY;

-- Drop old policies
DROP POLICY IF EXISTS volunteers_select_all ON volunteers;

-- SELECT: Self or coordinators/admins
CREATE POLICY volunteers_select_self_or_admin ON volunteers
  FOR SELECT
  USING (
    user_id = get_current_user_id() OR
    user_has_role(ARRAY['ngo_coordinator', 'regional_admin', 'super_admin', 'data_analyst'])
  );

-- INSERT: Only self (authenticated users can register as volunteers)
CREATE POLICY volunteers_insert_self ON volunteers
  FOR INSERT
  WITH CHECK (
    user_id = get_current_user_id()
  );

-- UPDATE: Only self can update own profile
CREATE POLICY volunteers_update_self ON volunteers
  FOR UPDATE
  USING (
    user_id = get_current_user_id()
  );

-- DELETE: Self or super admin
CREATE POLICY volunteers_delete_self_or_super_admin ON volunteers
  FOR DELETE
  USING (
    user_id = get_current_user_id() OR
    user_has_role(ARRAY['super_admin'])
  );

-- ============================================
-- 4. VOLUNTEER_REGISTRATIONS Table Policies
-- ============================================

-- Enable RLS
ALTER TABLE volunteer_registrations ENABLE ROW LEVEL SECURITY;

-- Drop old policies
DROP POLICY IF EXISTS volunteer_registrations_select_own ON volunteer_registrations;

-- SELECT: Volunteer (own registrations) or coordinators
CREATE POLICY volunteer_registrations_select_own_or_admin ON volunteer_registrations
  FOR SELECT
  USING (
    volunteer_id IN (
      SELECT id FROM volunteers WHERE user_id = get_current_user_id()
    ) OR
    user_has_role(ARRAY['ngo_coordinator', 'regional_admin', 'super_admin', 'data_analyst'])
  );

-- INSERT: Volunteers can register themselves
CREATE POLICY volunteer_registrations_insert_own ON volunteer_registrations
  FOR INSERT
  WITH CHECK (
    volunteer_id IN (
      SELECT id FROM volunteers WHERE user_id = get_current_user_id()
    )
  );

-- UPDATE: Volunteer (own, if pending) or coordinators (to approve/reject)
CREATE POLICY volunteer_registrations_update_own_or_admin ON volunteer_registrations
  FOR UPDATE
  USING (
    (
      volunteer_id IN (
        SELECT id FROM volunteers WHERE user_id = get_current_user_id()
      ) AND status = 'pending'
    ) OR
    user_has_role(ARRAY['ngo_coordinator', 'regional_admin', 'super_admin'])
  );

-- DELETE: Volunteer (own pending registrations) or super admin
CREATE POLICY volunteer_registrations_delete_own_or_super_admin ON volunteer_registrations
  FOR DELETE
  USING (
    (
      volunteer_id IN (
        SELECT id FROM volunteers WHERE user_id = get_current_user_id()
      ) AND status = 'pending'
    ) OR
    user_has_role(ARRAY['super_admin'])
  );

-- ============================================
-- 5. DISASTER_AREAS Table Policies
-- ============================================

-- Enable RLS (already enabled in 0004, but ensure it)
ALTER TABLE disaster_areas ENABLE ROW LEVEL SECURITY;

-- Drop old policies
DROP POLICY IF EXISTS disaster_areas_select_all ON disaster_areas;

-- SELECT: Everyone can view disaster areas (public safety info)
CREATE POLICY disaster_areas_select_public ON disaster_areas
  FOR SELECT
  USING (true);

-- INSERT: Only coordinators and admins
CREATE POLICY disaster_areas_insert_admin ON disaster_areas
  FOR INSERT
  WITH CHECK (
    user_has_role(ARRAY['ngo_coordinator', 'regional_admin', 'super_admin'])
  );

-- UPDATE: Only coordinators and admins
CREATE POLICY disaster_areas_update_admin ON disaster_areas
  FOR UPDATE
  USING (
    user_has_role(ARRAY['ngo_coordinator', 'regional_admin', 'super_admin'])
  );

-- DELETE: Only super admins
CREATE POLICY disaster_areas_delete_super_admin ON disaster_areas
  FOR DELETE
  USING (
    user_has_role(ARRAY['super_admin'])
  );

-- ============================================
-- 6. SUPPLY_DONATIONS Table Policies
-- ============================================

-- Enable RLS
ALTER TABLE supply_donations ENABLE ROW LEVEL SECURITY;

-- Drop old policies
DROP POLICY IF EXISTS supply_donations_select_all ON supply_donations;

-- SELECT: Everyone can view donations (public transparency)
CREATE POLICY supply_donations_select_public ON supply_donations
  FOR SELECT
  USING (true);

-- INSERT: Anyone authenticated can donate
CREATE POLICY supply_donations_insert_authenticated ON supply_donations
  FOR INSERT
  WITH CHECK (
    get_current_user_id() IS NOT NULL
  );

-- UPDATE: Creator (via donor_contact matching user email) or coordinators
-- Note: This is a simplified check. In production, you'd track creator_id separately
CREATE POLICY supply_donations_update_admin ON supply_donations
  FOR UPDATE
  USING (
    user_has_role(ARRAY['ngo_coordinator', 'regional_admin', 'super_admin'])
  );

-- DELETE: Only super admins
CREATE POLICY supply_donations_delete_super_admin ON supply_donations
  FOR DELETE
  USING (
    user_has_role(ARRAY['super_admin'])
  );

-- ============================================
-- 7. GRID_DISCUSSIONS Table Policies
-- ============================================

-- Enable RLS
ALTER TABLE grid_discussions ENABLE ROW LEVEL SECURITY;

-- Drop old policies
DROP POLICY IF EXISTS grid_discussions_select_all ON grid_discussions;

-- SELECT: Everyone can view discussions (public forum)
CREATE POLICY grid_discussions_select_public ON grid_discussions
  FOR SELECT
  USING (true);

-- INSERT: Anyone authenticated can post
CREATE POLICY grid_discussions_insert_authenticated ON grid_discussions
  FOR INSERT
  WITH CHECK (
    get_current_user_id() IS NOT NULL AND
    user_id = get_current_user_id()
  );

-- UPDATE: Only author can update own messages
CREATE POLICY grid_discussions_update_author ON grid_discussions
  FOR UPDATE
  USING (
    user_id = get_current_user_id()
  );

-- DELETE: Author or super admin
CREATE POLICY grid_discussions_delete_author_or_super_admin ON grid_discussions
  FOR DELETE
  USING (
    user_id = get_current_user_id() OR
    user_has_role(ARRAY['super_admin'])
  );

-- ============================================
-- 8. OTP_CODES Table Policies
-- ============================================
-- OTP codes should have strict access control

-- Enable RLS
ALTER TABLE otp_codes ENABLE ROW LEVEL SECURITY;

-- SELECT: Only system (no direct user access)
-- This prevents users from reading OTP codes directly
CREATE POLICY otp_codes_no_select ON otp_codes
  FOR SELECT
  USING (false);

-- INSERT: Only through authentication system
-- In practice, this will be handled by SECURITY DEFINER functions
CREATE POLICY otp_codes_no_direct_insert ON otp_codes
  FOR INSERT
  WITH CHECK (false);

-- UPDATE: Only through authentication system
CREATE POLICY otp_codes_no_update ON otp_codes
  FOR UPDATE
  USING (false);

-- DELETE: Only super admin for cleanup
CREATE POLICY otp_codes_delete_super_admin ON otp_codes
  FOR DELETE
  USING (
    user_has_role(ARRAY['super_admin'])
  );

-- ============================================
-- 9. LOGIN_HISTORY Table Policies
-- ============================================

-- Enable RLS
ALTER TABLE login_history ENABLE ROW LEVEL SECURITY;

-- SELECT: Users can view own login history, admins can view all
CREATE POLICY login_history_select_self_or_admin ON login_history
  FOR SELECT
  USING (
    user_id = get_current_user_id() OR
    user_has_role(ARRAY['super_admin', 'regional_admin'])
  );

-- INSERT: Only through authentication system (SECURITY DEFINER functions)
CREATE POLICY login_history_no_direct_insert ON login_history
  FOR INSERT
  WITH CHECK (false);

-- UPDATE: No updates allowed
CREATE POLICY login_history_no_update ON login_history
  FOR UPDATE
  USING (false);

-- DELETE: Only super admin for data retention
CREATE POLICY login_history_delete_super_admin ON login_history
  FOR DELETE
  USING (
    user_has_role(ARRAY['super_admin'])
  );

-- ============================================
-- 10. PERMISSIONS and ROLE_PERMISSIONS Tables
-- ============================================

-- Enable RLS on permissions table
ALTER TABLE permissions ENABLE ROW LEVEL SECURITY;

-- SELECT: Everyone can view available permissions
CREATE POLICY permissions_select_all ON permissions
  FOR SELECT
  USING (true);

-- INSERT/UPDATE/DELETE: Only super admin
CREATE POLICY permissions_modify_super_admin ON permissions
  FOR ALL
  USING (
    user_has_role(ARRAY['super_admin'])
  );

-- Enable RLS on role_permissions table
ALTER TABLE role_permissions ENABLE ROW LEVEL SECURITY;

-- SELECT: Everyone can view role permissions mapping
CREATE POLICY role_permissions_select_all ON role_permissions
  FOR SELECT
  USING (true);

-- INSERT/UPDATE/DELETE: Only super admin
CREATE POLICY role_permissions_modify_super_admin ON role_permissions
  FOR ALL
  USING (
    user_has_role(ARRAY['super_admin'])
  );

-- ============================================
-- 11. USER_PERMISSIONS Table Policies
-- ============================================

-- Enable RLS
ALTER TABLE user_permissions ENABLE ROW LEVEL SECURITY;

-- SELECT: Users can view own permissions, admins can view all
CREATE POLICY user_permissions_select_self_or_admin ON user_permissions
  FOR SELECT
  USING (
    user_id = get_current_user_id() OR
    user_has_role(ARRAY['super_admin', 'regional_admin'])
  );

-- INSERT/UPDATE/DELETE: Only super admin can manage user permissions
CREATE POLICY user_permissions_modify_super_admin ON user_permissions
  FOR ALL
  USING (
    user_has_role(ARRAY['super_admin'])
  );

-- ============================================
-- End of Migration 0009
-- ============================================

-- Grant execute permissions on helper functions to authenticated users
GRANT EXECUTE ON FUNCTION user_has_role(TEXT[]) TO PUBLIC;
GRANT EXECUTE ON FUNCTION get_current_user_id() TO PUBLIC;
GRANT EXECUTE ON FUNCTION is_admin() TO PUBLIC;

-- Create index on users.role for faster role checks
CREATE INDEX IF NOT EXISTS idx_users_role_lookup ON users(role) WHERE role IS NOT NULL;

-- Add comment documenting the RLS policy structure
COMMENT ON FUNCTION user_has_role IS 'Check if current user has one of the specified roles. Used in RLS policies.';
COMMENT ON FUNCTION get_current_user_id IS 'Safely get current user ID from app.user_id session variable.';
COMMENT ON FUNCTION is_admin IS 'Check if current user is an admin (coordinator or above).';
;
INSERT INTO "public"."pgmigrations" (name, run_on) VALUES ('1696273200000_complete_rls_policies', NOW());


### MIGRATION 1696276800000_add_missing_columns (UP) ###
-- Migration 0013: Add missing columns to align with BACKEND_API_INTEGRATION_GUIDE.md
-- Purpose: Add contact_info, risks_notes to grids table and volunteer fields to volunteer_registrations
-- Created: 2025-10-03
-- Reference: BACKEND_API_INTEGRATION_GUIDE.md lines 850-878

-- ============================================================================
-- GRIDS TABLE: Add contact and risk information
-- ============================================================================

-- Add contact_info column (sensitive data for grid coordinators)
ALTER TABLE grids
  ADD COLUMN IF NOT EXISTS contact_info VARCHAR(255);

-- Add risks_notes column for safety information
ALTER TABLE grids
  ADD COLUMN IF NOT EXISTS risks_notes TEXT;

-- Add comments for documentation
COMMENT ON COLUMN grids.contact_info IS 'Contact information for grid coordinators - SENSITIVE DATA';
COMMENT ON COLUMN grids.risks_notes IS 'Risk notes and safety information for the grid location';

-- ============================================================================
-- VOLUNTEER_REGISTRATIONS TABLE: Add volunteer-specific fields
-- ============================================================================

-- Add volunteer_name column (if not exists)
ALTER TABLE volunteer_registrations
  ADD COLUMN IF NOT EXISTS volunteer_name VARCHAR(255);

-- Add volunteer_phone column (sensitive data)
ALTER TABLE volunteer_registrations
  ADD COLUMN IF NOT EXISTS volunteer_phone VARCHAR(50);

-- Add available_time column for volunteer availability
ALTER TABLE volunteer_registrations
  ADD COLUMN IF NOT EXISTS available_time TEXT;

-- Add skills array column
ALTER TABLE volunteer_registrations
  ADD COLUMN IF NOT EXISTS skills TEXT[];

-- Add equipment array column
ALTER TABLE volunteer_registrations
  ADD COLUMN IF NOT EXISTS equipment TEXT[];

-- Add comments for documentation
COMMENT ON COLUMN volunteer_registrations.volunteer_name IS 'Name of the volunteer (may differ from user display_name)';
COMMENT ON COLUMN volunteer_registrations.volunteer_phone IS 'Volunteer phone number - SENSITIVE DATA, only visible to grid managers';
COMMENT ON COLUMN volunteer_registrations.available_time IS 'Time availability for volunteer work (e.g., "ÈÄ±Êú´ÂÖ®Â§©", "Âπ≥Êó•Êôö‰∏ä")';
COMMENT ON COLUMN volunteer_registrations.skills IS 'Array of volunteer skills (e.g., ["ÈáçÊ©üÊ¢∞Êìç‰Ωú", "ÈÜ´ÁôÇ", "ÁÉπÈ£™"])';
COMMENT ON COLUMN volunteer_registrations.equipment IS 'Array of equipment volunteer can bring (e.g., ["ÈèüÂ≠ê", "ÊâãÂ•ó", "Ê∞¥Ê°∂"])';

-- ============================================================================
-- INDEXES: Create indexes for better query performance
-- ============================================================================

-- No additional indexes needed for these text/array columns
-- Array columns support GIN indexes if needed in the future:
-- CREATE INDEX IF NOT EXISTS idx_volunteer_registrations_skills ON volunteer_registrations USING GIN (skills);
-- CREATE INDEX IF NOT EXISTS idx_volunteer_registrations_equipment ON volunteer_registrations USING GIN (equipment);

-- ============================================================================
-- RLS POLICIES: Update policies for sensitive data
-- ============================================================================

-- Note: RLS policies for grids.contact_info should be added in 0012_complete_rls_policies.sql
-- Grid managers (ngo_coordinator role) should be able to view contact_info for their assigned grids

-- Note: RLS policies for volunteer_registrations.volunteer_phone should be added in 0012_complete_rls_policies.sql
-- Only grid managers can view volunteer phone numbers for their assigned grids

-- ============================================================================
-- VERIFICATION QUERIES (for manual testing)
-- ============================================================================

-- Verify grids table columns
-- SELECT column_name, data_type, character_maximum_length
-- FROM information_schema.columns
-- WHERE table_name = 'grids'
-- AND column_name IN ('contact_info', 'risks_notes', 'meeting_point')
-- ORDER BY column_name;

-- Verify volunteer_registrations table columns
-- SELECT column_name, data_type, udt_name
-- FROM information_schema.columns
-- WHERE table_name = 'volunteer_registrations'
-- AND column_name IN ('volunteer_name', 'volunteer_phone', 'available_time', 'skills', 'equipment', 'notes')
-- ORDER BY column_name;

-- ============================================================================
-- SAMPLE DATA (for testing purposes)
-- ============================================================================

-- Update sample grids with contact info and risks
UPDATE grids
SET
  contact_info = 'ËÅØÁµ°‰∫∫ÔºöÈô≥ÁµÑÈï∑ 0912-345-678',
  risks_notes = 'Ê≥®ÊÑèÔºöË∑ØÈù¢ÊøïÊªëÔºåË´ãÁ©øÈò≤ÊªëÈûã„ÄÇÊúâÂÄíÂ°åÈ¢®Èö™Âª∫ÁØâÁâ©ÔºåË´ãÂãøÈù†Ëøë„ÄÇ'
WHERE code = 'A1' AND contact_info IS NULL;

UPDATE grids
SET
  contact_info = 'ËÅØÁµ°‰∫∫ÔºöÊûó‰∏ª‰ªª 0923-456-789',
  risks_notes = 'Ê≥®ÊÑèÔºöÈÉ®ÂàÜÂçÄÂüüÊ∞¥Ê∑±ÂèäËÜùÔºåË´ãÁ©øÈõ®Èûã„ÄÇÈõªÁ∑öÂèØËÉΩË£∏Èú≤ÔºåÊ≥®ÊÑèÂÆâÂÖ®„ÄÇ'
WHERE code = 'A2' AND contact_info IS NULL;

UPDATE grids
SET
  contact_info = 'ËÅØÁµ°‰∫∫ÔºöÁéãÈöäÈï∑ 0934-567-890',
  risks_notes = 'Ê≥®ÊÑèÔºöÊ≤≥Â≤∏Ê≥•ÊøòÔºåÊúâÊªëÂÄíÈ¢®Èö™„ÄÇË´ãÊîúÂ∏∂Âè£ÁΩ©Èò≤Ê≠¢Á≤âÂ°µ„ÄÇ'
WHERE code = 'A3' AND contact_info IS NULL;

-- Note: Sample volunteer_registrations data will be added in test files
-- Example structure:
-- INSERT INTO volunteer_registrations (
--   grid_id, user_id, volunteer_name, volunteer_phone,
--   status, available_time, skills, equipment, notes
-- ) VALUES (
--   (SELECT id FROM grids WHERE code = 'A1'),
--   (SELECT id FROM users WHERE phone = '0912000001'),
--   'ÂºµÂ∞èÊòé',
--   '0912-111-222',
--   'confirmed',
--   'ÈÄ±Êú´ÂÖ®Â§©',
--   ARRAY['ÈáçÊ©üÊ¢∞Êìç‰Ωú', 'ÊÄ•Êïë'],
--   ARRAY['ÈèüÂ≠ê', 'ÊâãÂ•ó', 'Ê∞¥Ê°∂'],
--   'ÊúâÊ∏ÖÊ∑§Á∂ìÈ©ó'
-- );
;
INSERT INTO "public"."pgmigrations" (name, run_on) VALUES ('1696276800000_add_missing_columns', NOW());


### MIGRATION 1696280400000_modular_rls (UP) ###
-- ============================================
-- Migration: Modular RLS Policies
-- Timestamp: 1696280400000
-- Created: 2025-10-03
-- Description: Apply modular RLS policies (inlined from sql/rls/ directory)
-- Supersedes: 0012_complete_rls_policies.sql
-- ============================================
--
-- This migration reorganizes RLS policies into modular sections for better
-- maintainability. All policies from migration 0012 are preserved but
-- now organized into logical, maintainable modules.
--
-- Original modular structure (for reference):
--   sql/rls/_helpers.sql          - Helper functions
--   sql/rls/users.sql             - Users table policies
--   sql/rls/grids.sql             - Grids table policies
--   sql/rls/disaster_areas.sql    - Disaster areas policies
--   sql/rls/announcements.sql     - Announcements policies
--   sql/rls/volunteers.sql        - Volunteers policies
--   sql/rls/volunteer_registrations.sql - Registration policies
--   sql/rls/supply_donations.sql  - Donations policies
--   sql/rls/grid_discussions.sql  - Discussions policies
--   sql/rls/auth_tables.sql       - OTP codes, login history
--   sql/rls/permissions.sql       - Permissions tables
-- ============================================

-- ============================================
-- Step 1: Drop all existing policies from 0012
-- ============================================

-- Helper functions (will be recreated)
DROP FUNCTION IF EXISTS user_has_role(TEXT[]) CASCADE;
DROP FUNCTION IF EXISTS get_current_user_id() CASCADE;
DROP FUNCTION IF EXISTS is_admin() CASCADE;
DROP FUNCTION IF EXISTS is_grid_manager(UUID) CASCADE;

-- Grids policies
DROP POLICY IF EXISTS grids_select_all ON grids;
DROP POLICY IF EXISTS grids_select_public ON grids;
DROP POLICY IF EXISTS grids_insert_admin ON grids;
DROP POLICY IF EXISTS grids_update_admin ON grids;
DROP POLICY IF EXISTS grids_delete_super_admin ON grids;

-- Announcements policies
DROP POLICY IF EXISTS announcements_select_published ON announcements;
DROP POLICY IF EXISTS announcements_select_public ON announcements;
DROP POLICY IF EXISTS announcements_insert_admin ON announcements;
DROP POLICY IF EXISTS announcements_update_author_or_admin ON announcements;
DROP POLICY IF EXISTS announcements_delete_author_or_super_admin ON announcements;

-- Volunteers policies
DROP POLICY IF EXISTS volunteers_select_all ON volunteers;
DROP POLICY IF EXISTS volunteers_select_self_or_admin ON volunteers;
DROP POLICY IF EXISTS volunteers_insert_self ON volunteers;
DROP POLICY IF EXISTS volunteers_update_self ON volunteers;
DROP POLICY IF EXISTS volunteers_delete_self_or_super_admin ON volunteers;

-- Volunteer registrations policies
DROP POLICY IF EXISTS volunteer_registrations_select_own ON volunteer_registrations;
DROP POLICY IF EXISTS volunteer_registrations_select_own_or_admin ON volunteer_registrations;
DROP POLICY IF EXISTS volunteer_registrations_insert_own ON volunteer_registrations;
DROP POLICY IF EXISTS volunteer_registrations_update_own_or_admin ON volunteer_registrations;
DROP POLICY IF EXISTS volunteer_registrations_delete_own_or_super_admin ON volunteer_registrations;

-- Disaster areas policies
DROP POLICY IF EXISTS disaster_areas_select_all ON disaster_areas;
DROP POLICY IF EXISTS disaster_areas_select_public ON disaster_areas;
DROP POLICY IF EXISTS disaster_areas_insert_admin ON disaster_areas;
DROP POLICY IF EXISTS disaster_areas_update_admin ON disaster_areas;
DROP POLICY IF EXISTS disaster_areas_delete_super_admin ON disaster_areas;

-- Supply donations policies
DROP POLICY IF EXISTS supply_donations_select_all ON supply_donations;
DROP POLICY IF EXISTS supply_donations_select_public ON supply_donations;
DROP POLICY IF EXISTS supply_donations_insert_authenticated ON supply_donations;
DROP POLICY IF EXISTS supply_donations_update_admin ON supply_donations;
DROP POLICY IF EXISTS supply_donations_delete_super_admin ON supply_donations;

-- Grid discussions policies
DROP POLICY IF EXISTS grid_discussions_select_all ON grid_discussions;
DROP POLICY IF EXISTS grid_discussions_select_public ON grid_discussions;
DROP POLICY IF EXISTS grid_discussions_insert_authenticated ON grid_discussions;
DROP POLICY IF EXISTS grid_discussions_update_author ON grid_discussions;
DROP POLICY IF EXISTS grid_discussions_delete_author_or_super_admin ON grid_discussions;

-- OTP codes policies
DROP POLICY IF EXISTS otp_codes_no_select ON otp_codes;
DROP POLICY IF EXISTS otp_codes_no_direct_insert ON otp_codes;
DROP POLICY IF EXISTS otp_codes_no_update ON otp_codes;
DROP POLICY IF EXISTS otp_codes_delete_super_admin ON otp_codes;

-- Login history policies
DROP POLICY IF EXISTS login_history_select_self_or_admin ON login_history;
DROP POLICY IF EXISTS login_history_no_direct_insert ON login_history;
DROP POLICY IF EXISTS login_history_no_update ON login_history;
DROP POLICY IF EXISTS login_history_delete_super_admin ON login_history;

-- Permissions policies
DROP POLICY IF EXISTS permissions_select_all ON permissions;
DROP POLICY IF EXISTS permissions_modify_super_admin ON permissions;

-- Role permissions policies
DROP POLICY IF EXISTS role_permissions_select_all ON role_permissions;
DROP POLICY IF EXISTS role_permissions_modify_super_admin ON role_permissions;

-- User permissions policies
DROP POLICY IF EXISTS user_permissions_select_self_or_admin ON user_permissions;
DROP POLICY IF EXISTS user_permissions_modify_super_admin ON user_permissions;

-- Users policies
DROP POLICY IF EXISTS users_select_self_or_admin ON users;
DROP POLICY IF EXISTS users_insert_system ON users;
DROP POLICY IF EXISTS users_update_self ON users;
DROP POLICY IF EXISTS users_delete_super_admin ON users;

-- ============================================
-- Step 2: Apply modular RLS policies (inlined)
-- ============================================

-- ============================================
-- MODULE: RLS Helper Functions
-- Must be applied before any table policies
-- ============================================

-- Function to check if user has one of the required roles
CREATE OR REPLACE FUNCTION user_has_role(required_roles TEXT[])
RETURNS BOOLEAN AS $$
DECLARE
  current_user_id UUID;
  current_user_role TEXT;
BEGIN
  -- Get current user ID from session context
  BEGIN
    current_user_id := current_setting('app.user_id', true)::UUID;
  EXCEPTION WHEN OTHERS THEN
    RETURN FALSE;
  END;

  -- Return false if no user context
  IF current_user_id IS NULL THEN
    RETURN FALSE;
  END IF;

  -- Get user role
  SELECT role INTO current_user_role
  FROM users
  WHERE id = current_user_id;

  -- Check if user role is in required roles
  RETURN current_user_role = ANY(required_roles);
END;
$$ LANGUAGE plpgsql SECURITY DEFINER STABLE;

-- Function to get current user ID safely
CREATE OR REPLACE FUNCTION get_current_user_id()
RETURNS UUID AS $$
BEGIN
  RETURN current_setting('app.user_id', true)::UUID;
EXCEPTION WHEN OTHERS THEN
  RETURN NULL;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER STABLE;

-- Function to check if user is admin (coordinator or above)
CREATE OR REPLACE FUNCTION is_admin()
RETURNS BOOLEAN AS $$
BEGIN
  RETURN user_has_role(ARRAY['ngo_coordinator', 'regional_admin', 'super_admin']);
END;
$$ LANGUAGE plpgsql SECURITY DEFINER STABLE;

-- Function to check if user is grid manager for a specific grid
CREATE OR REPLACE FUNCTION is_grid_manager(grid_id_param UUID)
RETURNS BOOLEAN AS $$
DECLARE
  current_user_id UUID;
  manager_id UUID;
BEGIN
  current_user_id := get_current_user_id();

  IF current_user_id IS NULL THEN
    RETURN FALSE;
  END IF;

  SELECT grid_manager_id INTO manager_id
  FROM grids
  WHERE id = grid_id_param;

  RETURN manager_id = current_user_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER STABLE;

-- Grant execute permissions to public
GRANT EXECUTE ON FUNCTION user_has_role(TEXT[]) TO PUBLIC;
GRANT EXECUTE ON FUNCTION get_current_user_id() TO PUBLIC;
GRANT EXECUTE ON FUNCTION is_admin() TO PUBLIC;
GRANT EXECUTE ON FUNCTION is_grid_manager(UUID) TO PUBLIC;

-- Create indexes for faster role checks
CREATE INDEX IF NOT EXISTS idx_users_role_lookup ON users(role) WHERE role IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_grids_manager_lookup ON grids(grid_manager_id) WHERE grid_manager_id IS NOT NULL;

-- Comments
COMMENT ON FUNCTION user_has_role IS 'Check if current user has one of the specified roles. Used in RLS policies.';
COMMENT ON FUNCTION get_current_user_id IS 'Safely get current user ID from app.user_id session variable.';
COMMENT ON FUNCTION is_admin IS 'Check if current user is an admin (coordinator or above).';
COMMENT ON FUNCTION is_grid_manager IS 'Check if current user is the manager of a specific grid.';

-- ============================================
-- MODULE: RLS Policies for users table
-- Self-access and admin management
-- ============================================

ALTER TABLE users ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS users_select_self_or_admin ON users;
DROP POLICY IF EXISTS users_insert_system ON users;
DROP POLICY IF EXISTS users_update_self ON users;
DROP POLICY IF EXISTS users_delete_super_admin ON users;

-- SELECT: Users can view own profile, admins can view all
CREATE POLICY users_select_self_or_admin ON users
  FOR SELECT
  USING (
    id = get_current_user_id() OR
    user_has_role(ARRAY['ngo_coordinator', 'regional_admin', 'super_admin', 'data_analyst'])
  );

-- INSERT: Only through authentication system
CREATE POLICY users_insert_system ON users
  FOR INSERT
  WITH CHECK (false);

-- UPDATE: Users can update own profile, admins can update any user
CREATE POLICY users_update_self ON users
  FOR UPDATE
  USING (
    id = get_current_user_id() OR
    user_has_role(ARRAY['regional_admin', 'super_admin'])
  );

-- DELETE: Only super admins
CREATE POLICY users_delete_super_admin ON users
  FOR DELETE
  USING (
    user_has_role(ARRAY['super_admin'])
  );

-- ============================================
-- MODULE: RLS Policies for grids table
-- Public map data with admin-only modifications
-- ============================================

ALTER TABLE grids ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS grids_select_all ON grids;
DROP POLICY IF EXISTS grids_select_public ON grids;
DROP POLICY IF EXISTS grids_insert_admin ON grids;
DROP POLICY IF EXISTS grids_update_admin ON grids;
DROP POLICY IF EXISTS grids_delete_super_admin ON grids;

-- SELECT: Everyone can view grids
CREATE POLICY grids_select_public ON grids
  FOR SELECT
  USING (true);

-- INSERT: Only coordinators and admins
CREATE POLICY grids_insert_admin ON grids
  FOR INSERT
  WITH CHECK (
    user_has_role(ARRAY['ngo_coordinator', 'regional_admin', 'super_admin'])
  );

-- UPDATE: Only coordinators and admins
CREATE POLICY grids_update_admin ON grids
  FOR UPDATE
  USING (
    user_has_role(ARRAY['ngo_coordinator', 'regional_admin', 'super_admin'])
  );

-- DELETE: Only super admins
CREATE POLICY grids_delete_super_admin ON grids
  FOR DELETE
  USING (
    user_has_role(ARRAY['super_admin'])
  );

-- ============================================
-- MODULE: RLS Policies for disaster_areas table
-- Public safety information with admin control
-- ============================================

ALTER TABLE disaster_areas ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS disaster_areas_select_all ON disaster_areas;
DROP POLICY IF EXISTS disaster_areas_select_public ON disaster_areas;
DROP POLICY IF EXISTS disaster_areas_insert_admin ON disaster_areas;
DROP POLICY IF EXISTS disaster_areas_update_admin ON disaster_areas;
DROP POLICY IF EXISTS disaster_areas_delete_super_admin ON disaster_areas;

-- SELECT: Everyone can view disaster areas
CREATE POLICY disaster_areas_select_public ON disaster_areas
  FOR SELECT
  USING (true);

-- INSERT: Only coordinators and admins
CREATE POLICY disaster_areas_insert_admin ON disaster_areas
  FOR INSERT
  WITH CHECK (
    user_has_role(ARRAY['ngo_coordinator', 'regional_admin', 'super_admin'])
  );

-- UPDATE: Only coordinators and admins
CREATE POLICY disaster_areas_update_admin ON disaster_areas
  FOR UPDATE
  USING (
    user_has_role(ARRAY['ngo_coordinator', 'regional_admin', 'super_admin'])
  );

-- DELETE: Only super admins
CREATE POLICY disaster_areas_delete_super_admin ON disaster_areas
  FOR DELETE
  USING (
    user_has_role(ARRAY['super_admin'])
  );

-- ============================================
-- MODULE: RLS Policies for announcements table
-- Public announcements with author/admin control
-- ============================================

ALTER TABLE announcements ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS announcements_select_published ON announcements;
DROP POLICY IF EXISTS announcements_select_public ON announcements;
DROP POLICY IF EXISTS announcements_insert_admin ON announcements;
DROP POLICY IF EXISTS announcements_update_author_or_admin ON announcements;
DROP POLICY IF EXISTS announcements_delete_author_or_super_admin ON announcements;

-- SELECT: Published announcements visible to all, unpublished only to admins
CREATE POLICY announcements_select_public ON announcements
  FOR SELECT
  USING (published = true OR is_admin());

-- INSERT: Only coordinators and admins
CREATE POLICY announcements_insert_admin ON announcements
  FOR INSERT
  WITH CHECK (
    user_has_role(ARRAY['ngo_coordinator', 'regional_admin', 'super_admin'])
  );

-- UPDATE: Author or admins
CREATE POLICY announcements_update_author_or_admin ON announcements
  FOR UPDATE
  USING (
    author_id = get_current_user_id() OR
    user_has_role(ARRAY['ngo_coordinator', 'regional_admin', 'super_admin'])
  );

-- DELETE: Author or super admin
CREATE POLICY announcements_delete_author_or_super_admin ON announcements
  FOR DELETE
  USING (
    author_id = get_current_user_id() OR
    user_has_role(ARRAY['super_admin'])
  );

-- ============================================
-- MODULE: RLS Policies for volunteers table
-- Self-access and admin oversight
-- ============================================

ALTER TABLE volunteers ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS volunteers_select_all ON volunteers;
DROP POLICY IF EXISTS volunteers_select_self_or_admin ON volunteers;
DROP POLICY IF EXISTS volunteers_insert_self ON volunteers;
DROP POLICY IF EXISTS volunteers_update_self ON volunteers;
DROP POLICY IF EXISTS volunteers_delete_self_or_super_admin ON volunteers;

-- SELECT: Self or admins
CREATE POLICY volunteers_select_self_or_admin ON volunteers
  FOR SELECT
  USING (
    user_id = get_current_user_id() OR
    user_has_role(ARRAY['ngo_coordinator', 'regional_admin', 'super_admin', 'data_analyst'])
  );

-- INSERT: Only self
CREATE POLICY volunteers_insert_self ON volunteers
  FOR INSERT
  WITH CHECK (
    user_id = get_current_user_id()
  );

-- UPDATE: Only self
CREATE POLICY volunteers_update_self ON volunteers
  FOR UPDATE
  USING (
    user_id = get_current_user_id()
  );

-- DELETE: Self or super admin
CREATE POLICY volunteers_delete_self_or_super_admin ON volunteers
  FOR DELETE
  USING (
    user_id = get_current_user_id() OR
    user_has_role(ARRAY['super_admin'])
  );

-- ============================================
-- MODULE: RLS Policies for volunteer_registrations table
-- Volunteers manage own registrations, admins approve
-- ============================================

ALTER TABLE volunteer_registrations ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS volunteer_registrations_select_own ON volunteer_registrations;
DROP POLICY IF EXISTS volunteer_registrations_select_own_or_admin ON volunteer_registrations;
DROP POLICY IF EXISTS volunteer_registrations_insert_own ON volunteer_registrations;
DROP POLICY IF EXISTS volunteer_registrations_update_own_or_admin ON volunteer_registrations;
DROP POLICY IF EXISTS volunteer_registrations_delete_own_or_super_admin ON volunteer_registrations;

-- SELECT: Own registrations or admins
CREATE POLICY volunteer_registrations_select_own_or_admin ON volunteer_registrations
  FOR SELECT
  USING (
    volunteer_id IN (
      SELECT id FROM volunteers WHERE user_id = get_current_user_id()
    ) OR
    user_has_role(ARRAY['ngo_coordinator', 'regional_admin', 'super_admin', 'data_analyst'])
  );

-- INSERT: Own registrations only
CREATE POLICY volunteer_registrations_insert_own ON volunteer_registrations
  FOR INSERT
  WITH CHECK (
    volunteer_id IN (
      SELECT id FROM volunteers WHERE user_id = get_current_user_id()
    )
  );

-- UPDATE: Own pending registrations or admins
CREATE POLICY volunteer_registrations_update_own_or_admin ON volunteer_registrations
  FOR UPDATE
  USING (
    (
      volunteer_id IN (
        SELECT id FROM volunteers WHERE user_id = get_current_user_id()
      ) AND status = 'pending'
    ) OR
    user_has_role(ARRAY['ngo_coordinator', 'regional_admin', 'super_admin'])
  );

-- DELETE: Own pending registrations or super admin
CREATE POLICY volunteer_registrations_delete_own_or_super_admin ON volunteer_registrations
  FOR DELETE
  USING (
    (
      volunteer_id IN (
        SELECT id FROM volunteers WHERE user_id = get_current_user_id()
      ) AND status = 'pending'
    ) OR
    user_has_role(ARRAY['super_admin'])
  );

-- ============================================
-- MODULE: RLS Policies for supply_donations table
-- Public transparency with authenticated donations
-- ============================================

ALTER TABLE supply_donations ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS supply_donations_select_all ON supply_donations;
DROP POLICY IF EXISTS supply_donations_select_public ON supply_donations;
DROP POLICY IF EXISTS supply_donations_insert_authenticated ON supply_donations;
DROP POLICY IF EXISTS supply_donations_update_admin ON supply_donations;
DROP POLICY IF EXISTS supply_donations_delete_super_admin ON supply_donations;

-- SELECT: Everyone can view donations
CREATE POLICY supply_donations_select_public ON supply_donations
  FOR SELECT
  USING (true);

-- INSERT: Anyone authenticated
CREATE POLICY supply_donations_insert_authenticated ON supply_donations
  FOR INSERT
  WITH CHECK (
    get_current_user_id() IS NOT NULL
  );

-- UPDATE: Only coordinators
CREATE POLICY supply_donations_update_admin ON supply_donations
  FOR UPDATE
  USING (
    user_has_role(ARRAY['ngo_coordinator', 'regional_admin', 'super_admin'])
  );

-- DELETE: Only super admins
CREATE POLICY supply_donations_delete_super_admin ON supply_donations
  FOR DELETE
  USING (
    user_has_role(ARRAY['super_admin'])
  );

-- ============================================
-- MODULE: RLS Policies for grid_discussions table
-- Public forum with author control
-- ============================================

ALTER TABLE grid_discussions ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS grid_discussions_select_all ON grid_discussions;
DROP POLICY IF EXISTS grid_discussions_select_public ON grid_discussions;
DROP POLICY IF EXISTS grid_discussions_insert_authenticated ON grid_discussions;
DROP POLICY IF EXISTS grid_discussions_update_author ON grid_discussions;
DROP POLICY IF EXISTS grid_discussions_delete_author_or_super_admin ON grid_discussions;

-- SELECT: Everyone can view discussions
CREATE POLICY grid_discussions_select_public ON grid_discussions
  FOR SELECT
  USING (true);

-- INSERT: Authenticated users
CREATE POLICY grid_discussions_insert_authenticated ON grid_discussions
  FOR INSERT
  WITH CHECK (
    get_current_user_id() IS NOT NULL AND
    user_id = get_current_user_id()
  );

-- UPDATE: Only author
CREATE POLICY grid_discussions_update_author ON grid_discussions
  FOR UPDATE
  USING (
    user_id = get_current_user_id()
  );

-- DELETE: Author or super admin
CREATE POLICY grid_discussions_delete_author_or_super_admin ON grid_discussions
  FOR DELETE
  USING (
    user_id = get_current_user_id() OR
    user_has_role(ARRAY['super_admin'])
  );

-- ============================================
-- MODULE: RLS Policies for Authentication Tables
-- otp_codes and login_history
-- ============================================

-- OTP_CODES Table
ALTER TABLE otp_codes ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS otp_codes_no_select ON otp_codes;
DROP POLICY IF EXISTS otp_codes_no_direct_insert ON otp_codes;
DROP POLICY IF EXISTS otp_codes_no_update ON otp_codes;
DROP POLICY IF EXISTS otp_codes_delete_super_admin ON otp_codes;

-- SELECT: No direct access
CREATE POLICY otp_codes_no_select ON otp_codes
  FOR SELECT
  USING (false);

-- INSERT: Only through auth functions
CREATE POLICY otp_codes_no_direct_insert ON otp_codes
  FOR INSERT
  WITH CHECK (false);

-- UPDATE: Only through auth functions
CREATE POLICY otp_codes_no_update ON otp_codes
  FOR UPDATE
  USING (false);

-- DELETE: Only super admin
CREATE POLICY otp_codes_delete_super_admin ON otp_codes
  FOR DELETE
  USING (
    user_has_role(ARRAY['super_admin'])
  );

-- LOGIN_HISTORY Table
ALTER TABLE login_history ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS login_history_select_self_or_admin ON login_history;
DROP POLICY IF EXISTS login_history_no_direct_insert ON login_history;
DROP POLICY IF EXISTS login_history_no_update ON login_history;
DROP POLICY IF EXISTS login_history_delete_super_admin ON login_history;

-- SELECT: Self or admins
CREATE POLICY login_history_select_self_or_admin ON login_history
  FOR SELECT
  USING (
    user_id = get_current_user_id() OR
    user_has_role(ARRAY['super_admin', 'regional_admin'])
  );

-- INSERT: Only through auth functions
CREATE POLICY login_history_no_direct_insert ON login_history
  FOR INSERT
  WITH CHECK (false);

-- UPDATE: No updates (audit trail)
CREATE POLICY login_history_no_update ON login_history
  FOR UPDATE
  USING (false);

-- DELETE: Only super admin
CREATE POLICY login_history_delete_super_admin ON login_history
  FOR DELETE
  USING (
    user_has_role(ARRAY['super_admin'])
  );

-- ============================================
-- MODULE: RLS Policies for Permissions System
-- permissions, role_permissions, user_permissions
-- ============================================

-- PERMISSIONS Table
ALTER TABLE permissions ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS permissions_select_all ON permissions;
DROP POLICY IF EXISTS permissions_modify_super_admin ON permissions;

-- SELECT: Everyone can view
CREATE POLICY permissions_select_all ON permissions
  FOR SELECT
  USING (true);

-- INSERT/UPDATE/DELETE: Only super admin
CREATE POLICY permissions_modify_super_admin ON permissions
  FOR ALL
  USING (
    user_has_role(ARRAY['super_admin'])
  );

-- ROLE_PERMISSIONS Table
ALTER TABLE role_permissions ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS role_permissions_select_all ON role_permissions;
DROP POLICY IF EXISTS role_permissions_modify_super_admin ON role_permissions;

-- SELECT: Everyone can view
CREATE POLICY role_permissions_select_all ON role_permissions
  FOR SELECT
  USING (true);

-- INSERT/UPDATE/DELETE: Only super admin
CREATE POLICY role_permissions_modify_super_admin ON role_permissions
  FOR ALL
  USING (
    user_has_role(ARRAY['super_admin'])
  );

-- USER_PERMISSIONS Table
ALTER TABLE user_permissions ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS user_permissions_select_self_or_admin ON user_permissions;
DROP POLICY IF EXISTS user_permissions_modify_super_admin ON user_permissions;

-- SELECT: Self or admins
CREATE POLICY user_permissions_select_self_or_admin ON user_permissions
  FOR SELECT
  USING (
    user_id = get_current_user_id() OR
    user_has_role(ARRAY['super_admin', 'regional_admin'])
  );

-- INSERT/UPDATE/DELETE: Only super admin
CREATE POLICY user_permissions_modify_super_admin ON user_permissions
  FOR ALL
  USING (
    user_has_role(ARRAY['super_admin'])
  );

-- ============================================
-- Step 3: Verify all tables have RLS enabled
-- ============================================

DO $$
DECLARE
  tbl TEXT;
  tables TEXT[] := ARRAY[
    'users',
    'grids',
    'disaster_areas',
    'announcements',
    'volunteers',
    'volunteer_registrations',
    'supply_donations',
    'grid_discussions',
    'otp_codes',
    'login_history',
    'permissions',
    'role_permissions',
    'user_permissions'
  ];
BEGIN
  FOREACH tbl IN ARRAY tables
  LOOP
    -- Enable RLS (idempotent)
    EXECUTE format('ALTER TABLE %I ENABLE ROW LEVEL SECURITY', tbl);
    RAISE NOTICE 'RLS enabled for table: %', tbl;
  END LOOP;

  RAISE NOTICE 'Modular RLS policies applied successfully';
END $$;

-- ============================================
-- Step 4: Add table comments
-- ============================================

COMMENT ON TABLE users IS 'User accounts. Self-access for own data, admin access for management. RLS: modular_rls.sql';
COMMENT ON TABLE grids IS 'Grid system for disaster area management. Public read, admin write. RLS: modular_rls.sql';
COMMENT ON TABLE disaster_areas IS 'Disaster area definitions. Public read for safety, admin-only write. RLS: modular_rls.sql';
COMMENT ON TABLE announcements IS 'Public announcements. Published items visible to all, author + admin control. RLS: modular_rls.sql';
COMMENT ON TABLE volunteers IS 'Volunteer profiles. Users can manage own profile, admins can view all. RLS: modular_rls.sql';
COMMENT ON TABLE volunteer_registrations IS 'Volunteer grid registrations. Self-service with admin approval workflow. RLS: modular_rls.sql';
COMMENT ON TABLE supply_donations IS 'Supply donation tracking. Public transparency, authenticated donations. RLS: modular_rls.sql';
COMMENT ON TABLE grid_discussions IS 'Grid discussion forum. Public read, authenticated post, author edit/delete. RLS: modular_rls.sql';
COMMENT ON TABLE otp_codes IS 'One-time passwords. No direct access, managed through auth functions. RLS: modular_rls.sql';
COMMENT ON TABLE login_history IS 'Login audit trail. Immutable record, self-view + admin access. RLS: modular_rls.sql';
COMMENT ON TABLE permissions IS 'System permissions. Public read, super admin write. RLS: modular_rls.sql';
COMMENT ON TABLE role_permissions IS 'Role-permission mappings. Public read, super admin write. RLS: modular_rls.sql';
COMMENT ON TABLE user_permissions IS 'User-specific permissions. Self-view, super admin management. RLS: modular_rls.sql';

-- ============================================
-- End of Migration: Modular RLS
-- ============================================
;
INSERT INTO "public"."pgmigrations" (name, run_on) VALUES ('1696280400000_modular_rls', NOW());


### MIGRATION 1696284000000_fix_announcements_fk (UP) ###

-- UP MIGRATION
-- Drop the existing foreign key constraint
ALTER TABLE announcements
  DROP CONSTRAINT IF EXISTS announcements_author_id_fkey;

-- Ensure author_id column allows NULL (it should already, but make it explicit)
ALTER TABLE announcements
  ALTER COLUMN author_id DROP NOT NULL;

-- Recreate the foreign key constraint with ON DELETE SET NULL
-- This allows announcements to remain when their author is deleted
ALTER TABLE announcements
  ADD CONSTRAINT announcements_author_id_fkey
  FOREIGN KEY (author_id)
  REFERENCES users(id)
  ON DELETE SET NULL;

-- Add a comment to document the behavior
COMMENT ON CONSTRAINT announcements_author_id_fkey ON announcements IS
  'FK to users table with ON DELETE SET NULL - announcements remain when author is deleted';
;
INSERT INTO "public"."pgmigrations" (name, run_on) VALUES ('1696284000000_fix_announcements_fk', NOW());


### MIGRATION 1696287600000_add_cascade_constraints (UP) ###
-- Migration: Add CASCADE constraints to foreign keys
-- Purpose: Allow automatic deletion of related records when parent grids are deleted
-- Impact: Fixes ~25 tests that fail due to FK violations during cleanup
-- Generated: 2025-10-03

-- =============================================================================
-- VOLUNTEER REGISTRATIONS
-- =============================================================================

-- Drop existing FK constraint without CASCADE
ALTER TABLE volunteer_registrations
  DROP CONSTRAINT IF EXISTS volunteer_registrations_grid_id_fkey;

-- Recreate FK with ON DELETE CASCADE
-- This ensures volunteer_registrations are auto-deleted when grid is deleted
ALTER TABLE volunteer_registrations
  ADD CONSTRAINT volunteer_registrations_grid_id_fkey
  FOREIGN KEY (grid_id) REFERENCES grids(id) ON DELETE CASCADE;

-- =============================================================================
-- SUPPLY DONATIONS
-- =============================================================================

-- Drop existing FK constraint without CASCADE
ALTER TABLE supply_donations
  DROP CONSTRAINT IF EXISTS supply_donations_grid_id_fkey;

-- Recreate FK with ON DELETE CASCADE
-- This ensures supply_donations are auto-deleted when grid is deleted
ALTER TABLE supply_donations
  ADD CONSTRAINT supply_donations_grid_id_fkey
  FOREIGN KEY (grid_id) REFERENCES grids(id) ON DELETE CASCADE;

-- =============================================================================
-- GRID DISCUSSIONS
-- =============================================================================

-- Drop existing FK constraint without CASCADE
ALTER TABLE grid_discussions
  DROP CONSTRAINT IF EXISTS grid_discussions_grid_id_fkey;

-- Recreate FK with ON DELETE CASCADE
-- This ensures grid_discussions are auto-deleted when grid is deleted
ALTER TABLE grid_discussions
  ADD CONSTRAINT grid_discussions_grid_id_fkey
  FOREIGN KEY (grid_id) REFERENCES grids(id) ON DELETE CASCADE;

-- =============================================================================
-- VERIFICATION
-- =============================================================================

-- Verify the constraints are properly set
DO $$
DECLARE
  cascade_count INTEGER;
BEGIN
  -- Check how many CASCADE constraints we have on grids(id)
  SELECT COUNT(*) INTO cascade_count
  FROM information_schema.referential_constraints rc
  JOIN information_schema.key_column_usage kcu
    ON rc.constraint_name = kcu.constraint_name
  WHERE rc.delete_rule = 'CASCADE'
    AND kcu.table_name IN ('volunteer_registrations', 'supply_donations', 'grid_discussions')
    AND kcu.column_name = 'grid_id';

  IF cascade_count < 3 THEN
    RAISE EXCEPTION 'Expected 3 CASCADE constraints, found %', cascade_count;
  END IF;

  RAISE NOTICE 'Successfully added % CASCADE constraints on grid_id foreign keys', cascade_count;
END $$;
;
INSERT INTO "public"."pgmigrations" (name, run_on) VALUES ('1696287600000_add_cascade_constraints', NOW());


Migrations complete![0m
[32m‚úì Migrations applied successfully[0m
[34m[5/5] Verifying database setup...[0m
[32m‚úì Table exists: users[0m
[32m‚úì Table exists: disaster_areas[0m
[32m‚úì Table exists: grids[0m
[32m‚úì Table exists: volunteers[0m
[32m‚úì Table exists: volunteer_registrations[0m
[32m‚úì Table exists: announcements[0m
[32m‚úì Table exists: supply_donations[0m
[32m‚úì Table exists: grid_discussions[0m
[32m‚úì Table exists: pgmigrations[0m
[32m‚úì Function exists: user_has_role()[0m
[32m‚úì Function exists: get_current_user_id()[0m
[32m‚úì Function exists: is_admin()[0m
[32m‚úì Applied 16 migrations[0m
[32m‚úì Database verification completed successfully[0m
[1m
============================================================[0m
[32m[1m  ‚úì Test Database Setup Complete![0m
[1m============================================================
[0m
[34mYou can now run tests with:[0m
[0m  npm test
[0m
[34mConnection string:[0m
[0m  postgres://postgres:postgres@localhost:5432/shovelheroes_test
[0m

> shovel-backend@0.1.0 test
> vitest run


 RUN  v3.2.4 /home/thc1006/dev/shovel-heroes/packages/backend

 ‚ùØ tests/rls/grids.rls.test.ts (16 tests | 14 failed) 1666ms
   ‚úì RLS Policies: grids table > RLS Configuration > should have RLS enabled on grids table 152ms
   ‚úì RLS Policies: grids table > RLS Configuration > should have 4 policies on grids table 70ms
   √ó RLS Policies: grids table > SELECT policies > should allow unauthenticated users to view grids 73ms
     ‚Üí column "center_lat" of relation "disaster_areas" does not exist
   √ó RLS Policies: grids table > SELECT policies > should allow all authenticated users to view grids 106ms
     ‚Üí column "center_lat" of relation "disaster_areas" does not exist
   √ó RLS Policies: grids table > INSERT policies > should allow ngo_coordinator to insert grids 68ms
     ‚Üí column "center_lat" of relation "disaster_areas" does not exist
   √ó RLS Policies: grids table > INSERT policies > should allow regional_admin to insert grids 82ms
     ‚Üí column "center_lat" of relation "disaster_areas" does not exist
   √ó RLS Policies: grids table > INSERT policies > should prevent volunteer from inserting grids 77ms
     ‚Üí column "center_lat" of relation "disaster_areas" does not exist
   √ó RLS Policies: grids table > INSERT policies > should prevent data_analyst from inserting grids 68ms
     ‚Üí column "center_lat" of relation "disaster_areas" does not exist
   √ó RLS Policies: grids table > UPDATE policies > should allow super_admin to update grids 71ms
     ‚Üí column "center_lat" of relation "disaster_areas" does not exist
   √ó RLS Policies: grids table > UPDATE policies > should allow ngo_coordinator to update grids 77ms
     ‚Üí column "center_lat" of relation "disaster_areas" does not exist
   √ó RLS Policies: grids table > UPDATE policies > should prevent volunteer from updating grids 112ms
     ‚Üí column "center_lat" of relation "disaster_areas" does not exist
   √ó RLS Policies: grids table > DELETE policies > should allow only super_admin to delete grids 79ms
     ‚Üí column "center_lat" of relation "disaster_areas" does not exist
   √ó RLS Policies: grids table > DELETE policies > should prevent ngo_coordinator from deleting grids 105ms
     ‚Üí column "center_lat" of relation "disaster_areas" does not exist
   √ó RLS Policies: grids table > DELETE policies > should prevent regional_admin from deleting grids 115ms
     ‚Üí column "center_lat" of relation "disaster_areas" does not exist
   √ó RLS Policies: grids table > Grid Manager scenarios > should allow grid manager to be assigned 81ms
     ‚Üí column "center_lat" of relation "disaster_areas" does not exist
   √ó RLS Policies: grids table > Grid Manager scenarios > should verify is_grid_manager helper function works 94ms
     ‚Üí column "center_lat" of relation "disaster_areas" does not exist
 ‚ùØ tests/routes/supply-donations.test.ts (27 tests | 11 failed) 2014ms
   √ó Supply Donations CRUD - TDD > POST /supply-donations > Success Cases > should create supply donation with valid data and return 201 265ms
     ‚Üí expected 500 to be 201 // Object.is equality
   √ó Supply Donations CRUD - TDD > POST /supply-donations > Success Cases > should create supply donation without optional donor_contact 55ms
     ‚Üí expected 500 to be 201 // Object.is equality
   ‚úì Supply Donations CRUD - TDD > POST /supply-donations > Validation Failures > should return 400 when grid_id is missing 42ms
   ‚úì Supply Donations CRUD - TDD > POST /supply-donations > Validation Failures > should return 400 when grid_id is not a valid UUID 37ms
   ‚úì Supply Donations CRUD - TDD > POST /supply-donations > Validation Failures > should return 400 when donor_name is empty 57ms
   ‚úì Supply Donations CRUD - TDD > POST /supply-donations > Validation Failures > should return 400 when quantity is negative 68ms
   ‚úì Supply Donations CRUD - TDD > POST /supply-donations > Validation Failures > should return 400 when quantity is zero 52ms
   ‚úì Supply Donations CRUD - TDD > POST /supply-donations > Validation Failures > should return 400 when quantity is not an integer 49ms
   ‚úì Supply Donations CRUD - TDD > POST /supply-donations > Authentication & Authorization > should return 401 when no auth token is provided 59ms
   ‚úì Supply Donations CRUD - TDD > POST /supply-donations > Authentication & Authorization > should return 401 when auth token is invalid 16ms
   ‚úì Supply Donations CRUD - TDD > GET /supply-donations > Success Cases > should return empty array when no supply donations exist 20ms
   √ó Supply Donations CRUD - TDD > GET /supply-donations > Success Cases > should return all supply donations without authentication (public endpoint) 24ms
     ‚Üí expected [] to have a length of 3 but got +0
   √ó Supply Donations CRUD - TDD > GET /supply-donations > Success Cases > should order donations by created_at DESC 53ms
     ‚Üí expected [] to have a length of 2 but got +0
   √ó Supply Donations CRUD - TDD > GET /supply-donations > Success Cases > should limit results to 200 donations 8ms
     ‚Üí update or delete on table "users" violates foreign key constraint "volunteers_user_id_fkey" on table "volunteers"
   √ó Supply Donations CRUD - TDD > PUT /supply-donations/:id > Success Cases > should update supply donation status and return 200 178ms
     ‚Üí expected 500 to be 200 // Object.is equality
   √ó Supply Donations CRUD - TDD > PUT /supply-donations/:id > Success Cases > should update quantity and notes 95ms
     ‚Üí expected 500 to be 200 // Object.is equality
   √ó Supply Donations CRUD - TDD > PUT /supply-donations/:id > Success Cases > should support partial updates 64ms
     ‚Üí expected 500 to be 200 // Object.is equality
   ‚úì Supply Donations CRUD - TDD > PUT /supply-donations/:id > Validation Failures > should return 400 when status has invalid value 76ms
   ‚úì Supply Donations CRUD - TDD > PUT /supply-donations/:id > Validation Failures > should return 400 when quantity is negative 53ms
   ‚úì Supply Donations CRUD - TDD > PUT /supply-donations/:id > Not Found Cases > should return 404 when supply donation does not exist 35ms
   ‚úì Supply Donations CRUD - TDD > PUT /supply-donations/:id > Authentication & Authorization > should return 401 when no auth token is provided 30ms
   √ó Supply Donations CRUD - TDD > DELETE /supply-donations/:id > Success Cases > should delete supply donation successfully and return 204 26ms
     ‚Üí expected 404 to be 204 // Object.is equality
   ‚úì Supply Donations CRUD - TDD > DELETE /supply-donations/:id > Not Found Cases > should return 404 when supply donation does not exist 31ms
   ‚úì Supply Donations CRUD - TDD > DELETE /supply-donations/:id > Authentication & Authorization > should return 401 when no auth token is provided 45ms
   √ó Supply Donations CRUD - TDD > Edge Cases & Security > should handle concurrent updates correctly 49ms
     ‚Üí expected 500 to be 200 // Object.is equality
   √ó Supply Donations CRUD - TDD > Edge Cases & Security > should handle Unicode characters in text fields 17ms
     ‚Üí update or delete on table "users" violates foreign key constraint "volunteers_user_id_fkey" on table "volunteers"
   ‚úì Supply Donations CRUD - TDD > Edge Cases & Security > should sanitize SQL injection attempts 103ms
 ‚ùØ tests/routes/announcements.test.ts (29 tests | 14 failed) 2286ms
   √ó Announcements CRUD - TDD > POST /announcements > Success Cases > should create announcement with valid data and return 201 324ms
     ‚Üí expected 500 to be 201 // Object.is equality
   √ó Announcements CRUD - TDD > POST /announcements > Success Cases > should create announcement with default values 95ms
     ‚Üí expected 500 to be 201 // Object.is equality
   √ó Announcements CRUD - TDD > POST /announcements > Success Cases > should create unpublished announcement 38ms
     ‚Üí expected 500 to be 201 // Object.is equality
   √ó Announcements CRUD - TDD > POST /announcements > Success Cases > should create announcement with all priority levels 58ms
     ‚Üí expected 500 to be 201 // Object.is equality
   ‚úì Announcements CRUD - TDD > POST /announcements > Validation Failures > should return 400 when title is missing 34ms
   ‚úì Announcements CRUD - TDD > POST /announcements > Validation Failures > should return 400 when title is empty string 34ms
   ‚úì Announcements CRUD - TDD > POST /announcements > Validation Failures > should return 400 when content is missing 10ms
   ‚úì Announcements CRUD - TDD > POST /announcements > Validation Failures > should return 400 when priority has invalid value 46ms
   ‚úì Announcements CRUD - TDD > POST /announcements > Authentication & Authorization > should return 401 when no auth token is provided 37ms
   ‚úì Announcements CRUD - TDD > POST /announcements > Authentication & Authorization > should return 401 when auth token is invalid 43ms
   ‚úì Announcements CRUD - TDD > GET /announcements > Success Cases > should return empty array when no announcements exist 34ms
   √ó Announcements CRUD - TDD > GET /announcements > Success Cases > should return only published announcements (public endpoint) 40ms
     ‚Üí expected [] to have a length of 1 but got +0
   √ó Announcements CRUD - TDD > GET /announcements > Success Cases > should return announcements without authentication (public endpoint) 90ms
     ‚Üí expected [] to have a length of 3 but got +0
   √ó Announcements CRUD - TDD > GET /announcements > Success Cases > should order announcements by is_pinned DESC, order ASC, created_at DESC 87ms
     ‚Üí expected [] to have a length of 2 but got +0
   √ó Announcements CRUD - TDD > GET /announcements > Success Cases > should limit results to 100 announcements 75ms
     ‚Üí insert or update on table "announcements" violates foreign key constraint "announcements_author_id_fkey"
   √ó Announcements CRUD - TDD > PUT /announcements/:id > Success Cases > should update announcement and return 200 85ms
     ‚Üí update or delete on table "users" violates foreign key constraint "volunteers_user_id_fkey" on table "volunteers"
   √ó Announcements CRUD - TDD > PUT /announcements/:id > Success Cases > should support partial updates 128ms
     ‚Üí expected 404 to be 200 // Object.is equality
   √ó Announcements CRUD - TDD > PUT /announcements/:id > Success Cases > should update published status 85ms
     ‚Üí expected 500 to be 200 // Object.is equality
   ‚úì Announcements CRUD - TDD > PUT /announcements/:id > Validation Failures > should return 400 when title is empty string 54ms
   ‚úì Announcements CRUD - TDD > PUT /announcements/:id > Validation Failures > should return 400 when priority has invalid value 52ms
   ‚úì Announcements CRUD - TDD > PUT /announcements/:id > Not Found Cases > should return 404 when announcement does not exist 43ms
   ‚úì Announcements CRUD - TDD > PUT /announcements/:id > Authentication & Authorization > should return 401 when no auth token is provided 34ms
   √ó Announcements CRUD - TDD > DELETE /announcements/:id > Success Cases > should delete announcement successfully and return 204 34ms
     ‚Üí update or delete on table "users" violates foreign key constraint "volunteers_user_id_fkey" on table "volunteers"
   ‚úì Announcements CRUD - TDD > DELETE /announcements/:id > Not Found Cases > should return 404 when announcement does not exist 153ms
   ‚úì Announcements CRUD - TDD > DELETE /announcements/:id > Authentication & Authorization > should return 401 when no auth token is provided 19ms
   ‚úì Announcements CRUD - TDD > Edge Cases & Security > should handle Unicode characters in text fields 21ms
   ‚úì Announcements CRUD - TDD > Edge Cases & Security > should handle very long content 65ms
   √ó Announcements CRUD - TDD > Edge Cases & Security > should sanitize SQL injection attempts 51ms
     ‚Üí expected 500 to be 201 // Object.is equality
   √ó Announcements CRUD - TDD > Edge Cases & Security > should handle concurrent updates correctly 94ms
     ‚Üí expected 500 to be 200 // Object.is equality
 ‚ùØ tests/integration.test.ts (29 tests | 10 failed) 2518ms
   √ó Integration Tests - Full Workflow > Complete Disaster Response Workflow > should handle complete workflow: create disaster area ‚Üí create grid ‚Üí volunteer registration 325ms
     ‚Üí expected { ‚Ä¶(8) } to match object { Object (name, center_lat, ...) }
(7 matching properties omitted from actual)
   √ó Integration Tests - Full Workflow > Row-Level Security (RLS) Tests > should enforce RLS policies across multiple users 94ms
     ‚Üí column "user_id" of relation "volunteer_registrations" does not exist
   √ó Integration Tests - Full Workflow > Row-Level Security (RLS) Tests > should apply RLS filtering when app.user_id is set 58ms
     ‚Üí column "user_id" of relation "volunteer_registrations" does not exist
   ‚úì Integration Tests - Full Workflow > Rate Limiting Tests > should allow requests within rate limit 59ms
   ‚úì Integration Tests - Full Workflow > Rate Limiting Tests > should include rate limit headers 29ms
   √ó Integration Tests - Full Workflow > JWT Authentication Tests > should reject requests with invalid JWT 46ms
     ‚Üí update or delete on table "volunteers" violates foreign key constraint "volunteer_registrations_volunteer_id_fkey" on table "volunteer_registrations"
   ‚úì Integration Tests - Full Workflow > JWT Authentication Tests > should accept valid JWT tokens 172ms
   ‚úì Integration Tests - Full Workflow > JWT Authentication Tests > should handle JWT expiration 142ms
   ‚úì Integration Tests - Full Workflow > Input Validation Tests > should validate disaster area creation payload 44ms
   ‚úì Integration Tests - Full Workflow > Input Validation Tests > should validate volunteer registration payload 33ms
   ‚úì Integration Tests - Full Workflow > Input Validation Tests > should validate announcement payload 60ms
   ‚úì Integration Tests - Full Workflow > Error Handling Tests > should return 404 for non-existent disaster area 71ms
   √ó Integration Tests - Full Workflow > Error Handling Tests > should return 404 when updating non-existent disaster area 20ms
     ‚Üí update or delete on table "users" violates foreign key constraint "volunteers_user_id_fkey" on table "volunteers"
   √ó Integration Tests - Full Workflow > Error Handling Tests > should return 404 when deleting non-existent disaster area 87ms
     ‚Üí expected 401 to be 404 // Object.is equality
   ‚úì Integration Tests - Full Workflow > Error Handling Tests > should return proper JSON error format 48ms
   √ó Integration Tests - Full Workflow > CRUD Operations Tests > Announcements > should create and list announcements 65ms
     ‚Üí expected 400 to be 201 // Object.is equality
   √ó Integration Tests - Full Workflow > CRUD Operations Tests > Supply Donations > should create and list supply donations 57ms
     ‚Üí expected 400 to be 201 // Object.is equality
   √ó Integration Tests - Full Workflow > CRUD Operations Tests > Grid Discussions > should create and list grid discussions 45ms
     ‚Üí expected 400 to be 201 // Object.is equality
   ‚úì Integration Tests - Full Workflow > Grid Update Tests > should update grid with partial fields 51ms
   ‚úì Integration Tests - Full Workflow > Grid Update Tests > should update grid JSONB fields (bounds and supplies_needed) 53ms
   ‚úì Integration Tests - Full Workflow > Grid Update Tests > should update volunteer counts 36ms
   ‚úì Integration Tests - Full Workflow > Grid Update Tests > should return 404 when updating non-existent grid 44ms
   ‚úì Integration Tests - Full Workflow > Grid Update Tests > should return current grid when no fields provided 72ms
   ‚úì Integration Tests - Full Workflow > Grid Update Tests > should validate invalid grid_type in update 49ms
   ‚úì Integration Tests - Full Workflow > Grid Update Tests > should require authentication for grid updates 32ms
   √ó Integration Tests - Full Workflow > Grid Update Tests > should update updated_at timestamp 186ms
     ‚Üí expected 404 to be 200 // Object.is equality
   ‚úì Integration Tests - Full Workflow > Data Format Tests > should use ISO 8601 format for timestamps 85ms
   ‚úì Integration Tests - Full Workflow > Data Format Tests > should use UUIDs for all IDs 40ms
   ‚úì Integration Tests - Full Workflow > Data Format Tests > should use parameterized queries (no SQL injection) 90ms
 ‚ùØ tests/routes/volunteers.test.ts (24 tests | 18 failed) 3029ms
   ‚úì Volunteers Routes - TDD > GET /volunteers > Success Cases > should return empty array when no volunteers exist 249ms
   √ó Volunteers Routes - TDD > GET /volunteers > Success Cases > should return volunteers with basic information 113ms
     ‚Üí insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_grid_id_fkey"
   √ó Volunteers Routes - TDD > GET /volunteers > Success Cases > should mask phone numbers when can_view_phone is false (no auth) 96ms
     ‚Üí insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_grid_id_fkey"
   √ó Volunteers Routes - TDD > GET /volunteers > Success Cases > should show full phone numbers when authenticated as admin (can_view_phone is true) 144ms
     ‚Üí expected false to be true // Object.is equality
   √ó Volunteers Routes - TDD > GET /volunteers > Success Cases > should filter volunteers by grid_id 55ms
     ‚Üí insert or update on table "volunteers" violates foreign key constraint "volunteers_user_id_fkey"
   √ó Volunteers Routes - TDD > GET /volunteers > Success Cases > should support pagination with limit and offset 105ms
     ‚Üí insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_grid_id_fkey"
   √ó Volunteers Routes - TDD > GET /volunteers > Success Cases > should include status_counts when include_counts=true 122ms
     ‚Üí insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_grid_id_fkey"
   √ó Volunteers Routes - TDD > GET /volunteers > Success Cases > should not include status_counts when include_counts=false 183ms
     ‚Üí insert or update on table "volunteers" violates foreign key constraint "volunteers_user_id_fkey"
   √ó Volunteers Routes - TDD > GET /volunteers > Success Cases > should order volunteers by created_at DESC 75ms
     ‚Üí update or delete on table "users" violates foreign key constraint "volunteers_user_id_fkey" on table "volunteers"
   ‚úì Volunteers Routes - TDD > GET /volunteers > Query Parameter Validation > should return 400 when grid_id is not a valid UUID 70ms
   ‚úì Volunteers Routes - TDD > GET /volunteers > Query Parameter Validation > should handle negative limit gracefully 54ms
   ‚úì Volunteers Routes - TDD > GET /volunteers > Query Parameter Validation > should handle negative offset gracefully 45ms
   √ó Volunteers Routes - TDD > GET /volunteers > Phone Visibility for Null Values > should handle null phone numbers gracefully 69ms
     ‚Üí insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_grid_id_fkey"
   √ó Volunteers Routes - TDD > GET /volunteers > Edge Cases > should handle volunteers with empty string names as anonymous 109ms
     ‚Üí insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_volunteer_id_fkey"
   √ó Volunteers Routes - TDD > GET /volunteers > Edge Cases > should handle very large result sets with pagination 85ms
     ‚Üí insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_grid_id_fkey"
   √ó Volunteers Routes - TDD > GET /volunteers > Edge Cases > should handle concurrent requests efficiently 147ms
     ‚Üí insert or update on table "volunteers" violates foreign key constraint "volunteers_user_id_fkey"
   ‚úì Volunteers Routes - TDD > GET /volunteers > Security > should not leak sensitive information in error messages 97ms
   √ó Volunteers Routes - TDD > GET /volunteers > RBAC - Phone Number Visibility > Unauthenticated Users > should NOT see phone numbers for unauthenticated requests 63ms
     ‚Üí insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_grid_id_fkey"
   √ó Volunteers Routes - TDD > GET /volunteers > RBAC - Phone Number Visibility > Admin Users > should see full phone numbers for super_admin 158ms
     ‚Üí expected false to be true // Object.is equality
   √ó Volunteers Routes - TDD > GET /volunteers > RBAC - Phone Number Visibility > Admin Users > should see full phone numbers for regional_admin 50ms
     ‚Üí expected false to be true // Object.is equality
   √ó Volunteers Routes - TDD > GET /volunteers > RBAC - Phone Number Visibility > Grid Manager Users > should see phone numbers for volunteers in THEIR grids 56ms
     ‚Üí insert or update on table "grids" violates foreign key constraint "grids_grid_manager_id_fkey"
   √ó Volunteers Routes - TDD > GET /volunteers > RBAC - Phone Number Visibility > Grid Manager Users > should NOT see phone numbers for volunteers in OTHER grids 229ms
     ‚Üí insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_volunteer_id_fkey"
   √ó Volunteers Routes - TDD > GET /volunteers > RBAC - Phone Number Visibility > Grid Manager Users > should handle grid with no manager (no permission) 135ms
     ‚Üí update or delete on table "users" violates foreign key constraint "volunteers_user_id_fkey" on table "volunteers"
   ‚úì Volunteers Routes - TDD > GET /volunteers > RBAC - Phone Number Visibility > Regular Volunteer Users > should NOT see phone numbers for regular volunteer users 218ms
 ‚ùØ tests/routes/volunteer-registrations.test.ts (30 tests | 17 failed) 3259ms
   √ó Volunteer Registrations CRUD - TDD > POST /volunteer-registrations > Success Cases > should create volunteer registration with valid data and return 201 225ms
     ‚Üí insert or update on table "volunteers" violates foreign key constraint "volunteers_user_id_fkey"
   √ó Volunteer Registrations CRUD - TDD > POST /volunteer-registrations > Success Cases > should allow user to register themselves as volunteer 136ms
     ‚Üí insert or update on table "volunteers" violates foreign key constraint "volunteers_user_id_fkey"
   √ó Volunteer Registrations CRUD - TDD > POST /volunteer-registrations > Success Cases > should allow multiple volunteers to register for same grid 86ms
     ‚Üí insert or update on table "volunteers" violates foreign key constraint "volunteers_user_id_fkey"
   ‚úì Volunteer Registrations CRUD - TDD > POST /volunteer-registrations > Validation Failures > should return 400 when grid_id is missing 125ms
   ‚úì Volunteer Registrations CRUD - TDD > POST /volunteer-registrations > Validation Failures > should return 400 when volunteer_id is missing 26ms
   ‚úì Volunteer Registrations CRUD - TDD > POST /volunteer-registrations > Validation Failures > should return 400 when grid_id is not a valid UUID 46ms
   ‚úì Volunteer Registrations CRUD - TDD > POST /volunteer-registrations > Validation Failures > should return 400 when volunteer_id is not a valid UUID 47ms
   ‚úì Volunteer Registrations CRUD - TDD > POST /volunteer-registrations > Validation Failures > should handle non-existent grid_id 84ms
   ‚úì Volunteer Registrations CRUD - TDD > POST /volunteer-registrations > Authentication & Authorization > should return 401 when no auth token is provided 28ms
   ‚úì Volunteer Registrations CRUD - TDD > POST /volunteer-registrations > Authentication & Authorization > should return 401 when auth token is invalid 32ms
   √ó Volunteer Registrations CRUD - TDD > GET /volunteer-registrations > Success Cases > should return empty array when no registrations exist 24ms
     ‚Üí update or delete on table "users" violates foreign key constraint "volunteers_user_id_fkey" on table "volunteers"
   √ó Volunteer Registrations CRUD - TDD > GET /volunteer-registrations > Success Cases > should return all registrations without authentication (public endpoint) 121ms
     ‚Üí insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_grid_id_fkey"
   √ó Volunteer Registrations CRUD - TDD > GET /volunteer-registrations > Success Cases > should order registrations by created_at DESC 130ms
     ‚Üí insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_grid_id_fkey"
   √ó Volunteer Registrations CRUD - TDD > GET /volunteer-registrations > Success Cases > should limit results to 200 registrations 86ms
     ‚Üí insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_grid_id_fkey"
   √ó Volunteer Registrations CRUD - TDD > PUT /volunteer-registrations/:id > Success Cases > should update registration status and return 200 110ms
     ‚Üí insert or update on table "volunteers" violates foreign key constraint "volunteers_user_id_fkey"
   √ó Volunteer Registrations CRUD - TDD > PUT /volunteer-registrations/:id > Success Cases > should allow volunteer to update their own registration 99ms
     ‚Üí insert or update on table "volunteers" violates foreign key constraint "volunteers_user_id_fkey"
   √ó Volunteer Registrations CRUD - TDD > PUT /volunteer-registrations/:id > Success Cases > should support all valid status transitions 97ms
     ‚Üí insert or update on table "volunteers" violates foreign key constraint "volunteers_user_id_fkey"
   √ó Volunteer Registrations CRUD - TDD > PUT /volunteer-registrations/:id > Validation Failures > should return 400 when status has invalid value 59ms
     ‚Üí update or delete on table "users" violates foreign key constraint "volunteers_user_id_fkey" on table "volunteers"
   ‚úì Volunteer Registrations CRUD - TDD > PUT /volunteer-registrations/:id > Not Found Cases > should return 404 when registration does not exist 114ms
   ‚úì Volunteer Registrations CRUD - TDD > PUT /volunteer-registrations/:id > Authentication & Authorization > should return 401 when no auth token is provided 22ms
   √ó Volunteer Registrations CRUD - TDD > PUT /volunteer-registrations/:id > Authentication & Authorization > should prevent user from updating other volunteers registrations 40ms
     ‚Üí insert or update on table "volunteers" violates foreign key constraint "volunteers_user_id_fkey"
   √ó Volunteer Registrations CRUD - TDD > DELETE /volunteer-registrations/:id > Success Cases > should delete registration successfully and return 204 142ms
     ‚Üí insert or update on table "volunteers" violates foreign key constraint "volunteers_user_id_fkey"
   √ó Volunteer Registrations CRUD - TDD > DELETE /volunteer-registrations/:id > Success Cases > should allow volunteer to cancel their own registration 119ms
     ‚Üí insert or update on table "volunteers" violates foreign key constraint "volunteers_user_id_fkey"
   ‚úì Volunteer Registrations CRUD - TDD > DELETE /volunteer-registrations/:id > Not Found Cases > should return 404 when registration does not exist 86ms
   ‚úì Volunteer Registrations CRUD - TDD > DELETE /volunteer-registrations/:id > Authentication & Authorization > should return 401 when no auth token is provided 42ms
   √ó Volunteer Registrations CRUD - TDD > DELETE /volunteer-registrations/:id > Authentication & Authorization > should prevent user from deleting other volunteers registrations 125ms
     ‚Üí insert or update on table "volunteers" violates foreign key constraint "volunteers_user_id_fkey"
   ‚úì Volunteer Registrations CRUD - TDD > Edge Cases & Security > should handle concurrent registrations for same volunteer  315ms
   √ó Volunteer Registrations CRUD - TDD > Edge Cases & Security > should handle duplicate registration attempts 115ms
     ‚Üí insert or update on table "volunteers" violates foreign key constraint "volunteers_user_id_fkey"
   √ó Volunteer Registrations CRUD - TDD > Edge Cases & Security > should handle rapid status updates 107ms
     ‚Üí insert or update on table "volunteers" violates foreign key constraint "volunteers_user_id_fkey"
   ‚úì Volunteer Registrations CRUD - TDD > Edge Cases & Security > should validate UUID format in URL parameters 112ms
 ‚ùØ tests/routes/grids.test.ts (47 tests | 19 failed) 4225ms
   √ó Grids CRUD - TDD London School > POST /grids > Success Cases > should create grid with valid minimal data and return 201 409ms
     ‚Üí expected { ‚Ä¶(19) } to match object { code: 'A-1', ‚Ä¶(5) }
(13 matching properties omitted from actual)
   √ó Grids CRUD - TDD London School > POST /grids > Success Cases > should create grid with all optional fields 40ms
     ‚Üí expected { ‚Ä¶(19) } to match object { code: 'B-2', ‚Ä¶(12) }
(6 matching properties omitted from actual)
   √ó Grids CRUD - TDD London School > POST /grids > Success Cases > should create grid with null area_id (not linked to disaster area) 33ms
     ‚Üí expected 400 to be 201 // Object.is equality
   √ó Grids CRUD - TDD London School > POST /grids > Validation Failures > should return 400 when code is missing 54ms
     ‚Üí expected undefined to be 'bad_request' // Object.is equality
   √ó Grids CRUD - TDD London School > POST /grids > Validation Failures > should return 400 when grid_type is invalid 40ms
     ‚Üí expected undefined to be 'bad_request' // Object.is equality
   ‚úì Grids CRUD - TDD London School > POST /grids > Validation Failures > should return 400 when center_lat is out of range 39ms
   ‚úì Grids CRUD - TDD London School > POST /grids > Validation Failures > should return 400 when center_lng is out of range 38ms
   ‚úì Grids CRUD - TDD London School > POST /grids > Validation Failures > should return 400 when bounds format is invalid 58ms
   ‚úì Grids CRUD - TDD London School > POST /grids > Validation Failures > should return 400 when volunteer_needed is negative 46ms
   ‚úì Grids CRUD - TDD London School > POST /grids > Authentication & Authorization > should return 401 when no auth token is provided 28ms
   ‚úì Grids CRUD - TDD London School > POST /grids > Authentication & Authorization > should return 401 when auth token is invalid 33ms
   √ó Grids CRUD - TDD London School > POST /grids > Authentication & Authorization > should return 401 when auth token is expired 133ms
     ‚Üí expected 201 to be 401 // Object.is equality
   √ó Grids CRUD - TDD London School > POST /grids > Duplicate Code Handling > should return 409 when grid code already exists 57ms
     ‚Üí expected 201 to be 409 // Object.is equality
   √ó Grids CRUD - TDD London School > POST /grids > Foreign Key Constraints > should return 400 or 404 when area_id references non-existent disaster area 43ms
     ‚Üí update or delete on table "users" violates foreign key constraint "volunteers_user_id_fkey" on table "volunteers"
   ‚úì Grids CRUD - TDD London School > GET /grids > Success Cases > should return empty array when no grids exist 92ms
   √ó Grids CRUD - TDD London School > GET /grids > Success Cases > should return all grids without authentication (public endpoint) 84ms
     ‚Üí expected [ { ‚Ä¶(16) }, { ‚Ä¶(16) }, ‚Ä¶(3) ] to have a length of 3 but got 5
   √ó Grids CRUD - TDD London School > GET /grids > Success Cases > should filter grids by area_id query parameter 87ms
     ‚Üí expected [ { ‚Ä¶(16) } ] to have a length of 2 but got 1
   √ó Grids CRUD - TDD London School > GET /grids > Success Cases > should return grids ordered by code 55ms
     ‚Üí expected null to be 'A-1' // Object.is equality
   √ó Grids CRUD - TDD London School > GET /grids > Success Cases > should limit results to 100 grids 486ms
     ‚Üí expected [ { ‚Ä¶(16) }, { ‚Ä¶(16) }, ‚Ä¶(12) ] to have a length of 100 but got 14
   ‚úì Grids CRUD - TDD London School > GET /grids > Success Cases > should include all grid fields in response 51ms
   √ó Grids CRUD - TDD London School > GET /grids > Query Parameter Validation > should return 400 when area_id is not a valid UUID 92ms
     ‚Üí expected 200 to be 400 // Object.is equality
   ‚úì Grids CRUD - TDD London School > GET /grids > Query Parameter Validation > should return empty array when filtering by non-existent area_id 78ms
   √ó Grids CRUD - TDD London School > PUT /grids/:id > Success Cases > should update grid with valid data and return 200 53ms
     ‚Üí expected null to be 'ORIG-1' // Object.is equality
   √ó Grids CRUD - TDD London School > PUT /grids/:id > Success Cases > should support partial updates (only update provided fields) 91ms
     ‚Üí expected +0 to be 10 // Object.is equality
   ‚úì Grids CRUD - TDD London School > PUT /grids/:id > Success Cases > should update bounds field with valid GeoJSON-like structure 150ms
   ‚úì Grids CRUD - TDD London School > PUT /grids/:id > Success Cases > should update supplies_needed array 120ms
   ‚úì Grids CRUD - TDD London School > PUT /grids/:id > Success Cases > should update volunteer counts 196ms
   √ó Grids CRUD - TDD London School > PUT /grids/:id > Validation Failures > should return 400 when status has invalid value 80ms
     ‚Üí update or delete on table "volunteers" violates foreign key constraint "volunteer_registrations_volunteer_id_fkey" on table "volunteer_registrations"
   ‚úì Grids CRUD - TDD London School > PUT /grids/:id > Validation Failures > should return 400 when grid_type has invalid value 93ms
   √ó Grids CRUD - TDD London School > PUT /grids/:id > Validation Failures > should return 400 when bounds format is invalid 8ms
     ‚Üí update or delete on table "volunteers" violates foreign key constraint "volunteer_registrations_volunteer_id_fkey" on table "volunteer_registrations"
   ‚úì Grids CRUD - TDD London School > PUT /grids/:id > Validation Failures > should return 400 when volunteer numbers are negative 90ms
   ‚úì Grids CRUD - TDD London School > PUT /grids/:id > Not Found Cases > should return 404 when grid does not exist 27ms
   ‚úì Grids CRUD - TDD London School > PUT /grids/:id > Not Found Cases > should return 400 when grid ID is not a valid UUID 42ms
   ‚úì Grids CRUD - TDD London School > PUT /grids/:id > Authentication & Authorization > should return 401 when no auth token is provided 13ms
   ‚úì Grids CRUD - TDD London School > PUT /grids/:id > Authentication & Authorization > should return 401 when auth token is invalid 34ms
   ‚úì Grids CRUD - TDD London School > DELETE /grids/:id > Success Cases > should delete grid successfully and return 204 53ms
   ‚úì Grids CRUD - TDD London School > DELETE /grids/:id > Success Cases > should cascade delete volunteer_registrations when grid is deleted 220ms
   √ó Grids CRUD - TDD London School > DELETE /grids/:id > Success Cases > should cascade delete supply_donations when grid is deleted 22ms
     ‚Üí column "name" of relation "supply_donations" does not exist
   √ó Grids CRUD - TDD London School > DELETE /grids/:id > Success Cases > should cascade delete grid_discussions when grid is deleted 213ms
     ‚Üí column "content" of relation "grid_discussions" does not exist
   ‚úì Grids CRUD - TDD London School > DELETE /grids/:id > Not Found Cases > should return 404 when grid does not exist 176ms
   ‚úì Grids CRUD - TDD London School > DELETE /grids/:id > Not Found Cases > should return 400 when grid ID is not a valid UUID 39ms
   ‚úì Grids CRUD - TDD London School > DELETE /grids/:id > Authentication & Authorization > should return 401 when no auth token is provided 21ms
   ‚úì Grids CRUD - TDD London School > DELETE /grids/:id > Authentication & Authorization > should return 401 when auth token is invalid 20ms
   ‚úì Grids CRUD - TDD London School > Edge Cases & Security > should handle concurrent updates correctly 93ms
   ‚úì Grids CRUD - TDD London School > Edge Cases & Security > should sanitize input to prevent SQL injection 25ms
   ‚úì Grids CRUD - TDD London School > Edge Cases & Security > should handle very long text fields 35ms
   ‚úì Grids CRUD - TDD London School > Edge Cases & Security > should handle Unicode characters in text fields 22ms
stdout | tests/integration/api.test.ts > API Integration Tests
‚úì Environment variables validated successfully

 ‚ùØ tests/grids-post.test.ts (7 tests | 1 failed) 510ms
   √ó POST /grids > should create a new grid with valid data 170ms
     ‚Üí expected '23.5000000' to be 23.5 // Object.is equality
   ‚úì POST /grids > should return 400 for missing required fields 15ms
   ‚úì POST /grids > should return 400 for invalid grid_type 1ms
   ‚úì POST /grids > should return 400 for invalid coordinates 29ms
   ‚úì POST /grids > should return 401 without authentication 1ms
   ‚úì POST /grids > should return 409 for duplicate code 43ms
   ‚úì POST /grids > should use default values correctly 44ms
 ‚ùØ tests/routes/admin.test.ts (17 tests | 17 skipped) 188ms
   ‚Üì Admin Routes > GET /admin/users > should list users with pagination
   ‚Üì Admin Routes > GET /admin/users > should filter users by role
   ‚Üì Admin Routes > GET /admin/users > should filter users by status
   ‚Üì Admin Routes > GET /admin/users > should search users by email or phone
   ‚Üì Admin Routes > GET /admin/users > should require authentication
   ‚Üì Admin Routes > POST /admin/verify-victim > should approve victim verification
   ‚Üì Admin Routes > POST /admin/verify-victim > should reject victim verification
   ‚Üì Admin Routes > POST /admin/verify-victim > should request more info
   ‚Üì Admin Routes > POST /admin/verify-victim > should return 404 for non-existent victim
   ‚Üì Admin Routes > GET /admin/audit-logs > should get audit logs with pagination
   ‚Üì Admin Routes > GET /admin/audit-logs > should filter audit logs by user_id
   ‚Üì Admin Routes > GET /admin/audit-logs > should filter audit logs by action
   ‚Üì Admin Routes > PATCH /admin/users/:id/status > should update user status to suspended
   ‚Üì Admin Routes > PATCH /admin/users/:id/status > should update user status to active
   ‚Üì Admin Routes > PATCH /admin/users/:id/status > should prevent self-suspension
   ‚Üì Admin Routes > PATCH /admin/users/:id/status > should require super_admin role
   ‚Üì Admin Routes > GET /admin/stats > should return dashboard statistics
 ‚ùØ tests/integration/api.test.ts (16 tests | 16 skipped) 975ms
   ‚Üì API Integration Tests > 1. Grids CRUD > POST /grids - should create a new grid
   ‚Üì API Integration Tests > 1. Grids CRUD > GET /grids - should list all grids
   ‚Üì API Integration Tests > 1. Grids CRUD > GET /grids?area_id - should filter grids by area
   ‚Üì API Integration Tests > 1. Grids CRUD > PUT /grids/:id - should update grid status and volunteer_needed
   ‚Üì API Integration Tests > 1. Grids CRUD > DELETE /grids/:id - should delete grid
   ‚Üì API Integration Tests > 2. Volunteer Registrations > POST /volunteer-registrations - should create registration
   ‚Üì API Integration Tests > 2. Volunteer Registrations > PUT /volunteer-registrations/:id - should update status
   ‚Üì API Integration Tests > 2. Volunteer Registrations > GET /volunteer-registrations - should list registrations
   ‚Üì API Integration Tests > 3. Supply Donations CRUD > POST /supply-donations - should create donation
   ‚Üì API Integration Tests > 3. Supply Donations CRUD > PUT /supply-donations/:id - should update donation status
   ‚Üì API Integration Tests > 3. Supply Donations CRUD > DELETE /supply-donations/:id - should delete donation
   ‚Üì API Integration Tests > 4. Announcements CRUD > POST /announcements - should create announcement
   ‚Üì API Integration Tests > 4. Announcements CRUD > PUT /announcements/:id - should update announcement
   ‚Üì API Integration Tests > 4. Announcements CRUD > DELETE /announcements/:id - should delete announcement
   ‚Üì API Integration Tests > 5. Trigger Validation - volunteer_registered counter > should auto-increment volunteer_registered on registration
   ‚Üì API Integration Tests > 5. Trigger Validation - volunteer_registered counter > should auto-decrement volunteer_registered on deletion
 ‚ùØ tests/routes/grid-discussions.test.ts (21 tests | 11 failed) 2332ms
   √ó Grid Discussions Routes - TDD > POST /grid-discussions > Success Cases > should create grid discussion with valid data and return 201 345ms
     ‚Üí expected 500 to be 201 // Object.is equality
   ‚úì Grid Discussions Routes - TDD > POST /grid-discussions > Success Cases > should associate discussion with authenticated user from JWT 89ms
   √ó Grid Discussions Routes - TDD > POST /grid-discussions > Success Cases > should handle multiple discussions on same grid 109ms
     ‚Üí duplicate key value violates unique constraint "users_email_key"
   ‚úì Grid Discussions Routes - TDD > POST /grid-discussions > Validation Failures > should return 400 when grid_id is missing 141ms
   ‚úì Grid Discussions Routes - TDD > POST /grid-discussions > Validation Failures > should return 400 when grid_id is not a valid UUID 54ms
   ‚úì Grid Discussions Routes - TDD > POST /grid-discussions > Validation Failures > should return 400 when content is missing 70ms
   ‚úì Grid Discussions Routes - TDD > POST /grid-discussions > Validation Failures > should return 400 when content is empty string 56ms
   ‚úì Grid Discussions Routes - TDD > POST /grid-discussions > Validation Failures > should handle non-existent grid_id 45ms
   ‚úì Grid Discussions Routes - TDD > POST /grid-discussions > Authentication & Authorization > should return 401 when no auth token is provided 58ms
   ‚úì Grid Discussions Routes - TDD > POST /grid-discussions > Authentication & Authorization > should return 401 when auth token is invalid 119ms
   √ó Grid Discussions Routes - TDD > POST /grid-discussions > Authentication & Authorization > should return 401 when auth token is expired 168ms
     ‚Üí expected 400 to be 401 // Object.is equality
   ‚úì Grid Discussions Routes - TDD > GET /grid-discussions > Success Cases > should return empty array when no discussions exist 61ms
   √ó Grid Discussions Routes - TDD > GET /grid-discussions > Success Cases > should return all grid discussions without authentication (public endpoint) 79ms
     ‚Üí expected [] to have a length of 3 but got +0
   √ó Grid Discussions Routes - TDD > GET /grid-discussions > Success Cases > should order discussions by created_at DESC 68ms
     ‚Üí expected [] to have a length of 2 but got +0
   √ó Grid Discussions Routes - TDD > GET /grid-discussions > Success Cases > should limit results to 200 discussions 82ms
     ‚Üí column "content" of relation "grid_discussions" does not exist
   √ó Grid Discussions Routes - TDD > GET /grid-discussions > Success Cases > should include discussions from multiple grids 145ms
     ‚Üí expected [] to have a length of 2 but got +0
   √ó Grid Discussions Routes - TDD > Edge Cases & Security > should handle Unicode characters in content 47ms
     ‚Üí expected 400 to be 201 // Object.is equality
   ‚úì Grid Discussions Routes - TDD > Edge Cases & Security > should handle very long content 22ms
   √ó Grid Discussions Routes - TDD > Edge Cases & Security > should sanitize SQL injection attempts 46ms
     ‚Üí expected 400 to be 201 // Object.is equality
   √ó Grid Discussions Routes - TDD > Edge Cases & Security > should handle concurrent posts efficiently 62ms
     ‚Üí expected 400 to be 201 // Object.is equality
   √ó Grid Discussions Routes - TDD > Edge Cases & Security > should handle XSS attempts in content 60ms
     ‚Üí expected 400 to be 201 // Object.is equality
 ‚ùØ tests/integration/volunteer-registrations.test.ts (15 tests | 13 failed) 1414ms
   ‚úì PUT /volunteer-registrations/:id - Status Updates > Authentication and Authorization > should return 401 when no auth token provided 50ms
   ‚úì PUT /volunteer-registrations/:id - Status Updates > Authentication and Authorization > should return 404 when trying to update non-existent registration 124ms
   √ó PUT /volunteer-registrations/:id - Status Updates > Authentication and Authorization > should return 404 when trying to update another user's registration 32ms
     ‚Üí insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_volunteer_id_fkey"
   √ó PUT /volunteer-registrations/:id - Status Updates > Validation > should return 400 when status is missing 51ms
     ‚Üí insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_volunteer_id_fkey"
   √ó PUT /volunteer-registrations/:id - Status Updates > Validation > should return 400 when status is invalid 56ms
     ‚Üí insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_volunteer_id_fkey"
   √ó PUT /volunteer-registrations/:id - Status Updates > Status Transitions - User (Owner) > should allow user to update pending ‚Üí confirmed 62ms
     ‚Üí insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_volunteer_id_fkey"
   √ó PUT /volunteer-registrations/:id - Status Updates > Status Transitions - User (Owner) > should allow user to update confirmed ‚Üí arrived 67ms
     ‚Üí insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_volunteer_id_fkey"
   √ó PUT /volunteer-registrations/:id - Status Updates > Status Transitions - User (Owner) > should allow user to update arrived ‚Üí completed 36ms
     ‚Üí insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_volunteer_id_fkey"
   √ó PUT /volunteer-registrations/:id - Status Updates > Status Transitions - User (Owner) > should allow user to cancel from pending status 63ms
     ‚Üí insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_volunteer_id_fkey"
   √ó PUT /volunteer-registrations/:id - Status Updates > Status Transitions - User (Owner) > should allow user to cancel from confirmed status 57ms
     ‚Üí insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_volunteer_id_fkey"
   √ó PUT /volunteer-registrations/:id - Status Updates > Status Transitions - User (Owner) > should allow user to cancel from arrived status 49ms
     ‚Üí insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_volunteer_id_fkey"
   √ó PUT /volunteer-registrations/:id - Status Updates > Status Transitions - User (Owner) > should allow user to cancel from completed status 57ms
     ‚Üí insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_volunteer_id_fkey"
   √ó PUT /volunteer-registrations/:id - Status Updates > Complete Status Flow > should allow complete flow: pending ‚Üí confirmed ‚Üí arrived ‚Üí completed 70ms
     ‚Üí insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_volunteer_id_fkey"
   √ó PUT /volunteer-registrations/:id - Status Updates > Updated Timestamp > should update updated_at timestamp on status change 52ms
     ‚Üí insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_volunteer_id_fkey"
   √ó PUT /volunteer-registrations/:id - Status Updates > Response Format > should return complete registration object on success 83ms
     ‚Üí insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_volunteer_id_fkey"
 ‚ùØ tests/routes/users.test.ts (18 tests | 3 failed) 3024ms
   ‚úì Users Routes - TDD > GET /users > Success Cases > should return empty array when no users exist  339ms
   √ó Users Routes - TDD > GET /users > Success Cases > should return all users without authentication (public endpoint) 161ms
     ‚Üí expected [ { ‚Ä¶(5) }, { ‚Ä¶(5) }, { ‚Ä¶(5) }, ‚Ä¶(1) ] to have a length of 3 but got 4
   √ó Users Routes - TDD > GET /users > Success Cases > should limit results to 100 users 902ms
     ‚Üí expected [ { ‚Ä¶(5) }, { ‚Ä¶(5) }, { ‚Ä¶(5) }, ‚Ä¶(1) ] to have a length of 100 but got 4
   ‚úì Users Routes - TDD > GET /users > Success Cases > should not expose sensitive information 74ms
   √ó Users Routes - TDD > GET /users > Edge Cases > should handle Unicode characters in names 38ms
     ‚Üí expected 'Test User' to be 'ÁéãÂ∞èÊòé üòä' // Object.is equality
   ‚úì Users Routes - TDD > GET /users > Edge Cases > should handle null phone numbers 42ms
   ‚úì Users Routes - TDD > GET /me > Success Cases > should return current user info when authenticated 137ms
   ‚úì Users Routes - TDD > GET /me > Success Cases > should upsert user if not exists in database (JWT-based auth) 54ms
   ‚úì Users Routes - TDD > GET /me > Success Cases > should return user with all expected fields 49ms
   ‚úì Users Routes - TDD > GET /me > Authentication Failures > should return 401 when no auth token is provided 48ms
   ‚úì Users Routes - TDD > GET /me > Authentication Failures > should return 401 when auth token is invalid 60ms
   ‚úì Users Routes - TDD > GET /me > Authentication Failures > should return 401 when auth token is expired 142ms
   ‚úì Users Routes - TDD > GET /me > Authentication Failures > should return 401 when auth token is malformed 29ms
   ‚úì Users Routes - TDD > GET /me > Authentication Failures > should return 401 when authorization header is missing Bearer prefix 20ms
   ‚úì Users Routes - TDD > GET /me > Edge Cases > should handle concurrent requests from same user 141ms
   ‚úì Users Routes - TDD > GET /me > Edge Cases > should handle very long email addresses 108ms
   ‚úì Users Routes - TDD > Security > should not expose other users data via /me endpoint 33ms
   ‚úì Users Routes - TDD > Security > should sanitize SQL injection attempts in JWT sub claim 75ms
 ‚úì tests/schema/migration-0013.test.ts (15 tests) 547ms
stdout | tests/lib/test-db-setup.test.ts > Test Database Setup > Migration Status > should list all applied migrations

Applied migrations:
  - 1696233600000_init (Fri Oct 03 2025 07:18:47 GMT+0800 (Taiwan Standard Time))
  - 1696237200000_rls (Fri Oct 03 2025 07:18:47 GMT+0800 (Taiwan Standard Time))
  - 1696240800000_audit (Fri Oct 03 2025 07:18:47 GMT+0800 (Taiwan Standard Time))
  - 1696244400000_create_all_tables (Fri Oct 03 2025 07:18:47 GMT+0800 (Taiwan Standard Time))
  - 1696248000000_expand_grids_table (Fri Oct 03 2025 07:18:47 GMT+0800 (Taiwan Standard Time))
  - 1696251600000_add_announcement_fields (Fri Oct 03 2025 07:18:47 GMT+0800 (Taiwan Standard Time))
  - 1696255200000_add_volunteer_registration_statuses (Fri Oct 03 2025 07:18:47 GMT+0800 (Taiwan Standard Time))
  - 1696258800000_add_grid_manager_column (Fri Oct 03 2025 07:18:47 GMT+0800 (Taiwan Standard Time))
  - 1696262400000_create_auth_system (Fri Oct 03 2025 07:18:47 GMT+0800 (Taiwan Standard Time))
  - 1696266000000_add_grid_code_unique_constraint (Fri Oct 03 2025 07:18:47 GMT+0800 (Taiwan Standard Time))
  - 1696269600000_auto_update_volunteer_count (Fri Oct 03 2025 07:18:47 GMT+0800 (Taiwan Standard Time))
  - 1696273200000_complete_rls_policies (Fri Oct 03 2025 07:18:47 GMT+0800 (Taiwan Standard Time))
  - 1696276800000_add_missing_columns (Fri Oct 03 2025 07:18:47 GMT+0800 (Taiwan Standard Time))
  - 1696280400000_modular_rls (Fri Oct 03 2025 07:18:47 GMT+0800 (Taiwan Standard Time))
  - 1696284000000_fix_announcements_fk (Fri Oct 03 2025 07:18:47 GMT+0800 (Taiwan Standard Time))
  - 1696287600000_add_cascade_constraints (Fri Oct 03 2025 07:18:47 GMT+0800 (Taiwan Standard Time))

stdout | tests/routes/debug.test.ts > Debug Routes
‚úì Environment variables validated successfully

stdout | tests/lib/test-db-setup.test.ts > Test Database Setup > Required Tables > should have all required tables

All tables in test database:
  - announcements
  - audit_log
  - audit_logs
  - disaster_areas
  - grid_discussions
  - grids
  - login_history
  - otp_codes
  - permissions
  - pgmigrations
  - role_permissions
  - sessions
  - supply_donations
  - user_permissions
  - users
  - victim_profiles
  - volunteer_profiles
  - volunteer_registrations
  - volunteers

stdout | tests/lib/test-db-setup.test.ts > Test Database Setup > Row-Level Security (RLS) > should list all RLS policies

RLS Policies:
  - announcements.announcements_delete_author_or_super_admin (DELETE)
  - announcements.announcements_insert_admin (INSERT)
  - announcements.announcements_select_public (SELECT)
  - announcements.announcements_update_author_or_admin (UPDATE)
  - disaster_areas.disaster_areas_delete_super_admin (DELETE)
  - disaster_areas.disaster_areas_insert_admin (INSERT)
  - disaster_areas.disaster_areas_select_public (SELECT)
  - disaster_areas.disaster_areas_update_admin (UPDATE)
  - grid_discussions.grid_discussions_delete_author_or_super_admin (DELETE)
  - grid_discussions.grid_discussions_insert_authenticated (INSERT)
  - grid_discussions.grid_discussions_select_public (SELECT)
  - grid_discussions.grid_discussions_update_author (UPDATE)
  - grids.grids_delete_super_admin (DELETE)
  - grids.grids_insert_admin (INSERT)
  - grids.grids_select_public (SELECT)
  - grids.grids_update_admin (UPDATE)
  - login_history.login_history_delete_super_admin (DELETE)
  - login_history.login_history_no_direct_insert (INSERT)
  - login_history.login_history_no_update (UPDATE)
  - login_history.login_history_select_self_or_admin (SELECT)
  - otp_codes.otp_codes_delete_super_admin (DELETE)
  - otp_codes.otp_codes_no_direct_insert (INSERT)
  - otp_codes.otp_codes_no_select (SELECT)
  - otp_codes.otp_codes_no_update (UPDATE)
  - permissions.permissions_modify_super_admin (ALL)
  - permissions.permissions_select_all (SELECT)
  - role_permissions.role_permissions_modify_super_admin (ALL)
  - role_permissions.role_permissions_select_all (SELECT)
  - supply_donations.supply_donations_delete_super_admin (DELETE)
  - supply_donations.supply_donations_insert_authenticated (INSERT)
  - supply_donations.supply_donations_select_public (SELECT)
  - supply_donations.supply_donations_update_admin (UPDATE)
  - user_permissions.user_permissions_modify_super_admin (ALL)
  - user_permissions.user_permissions_select_self_or_admin (SELECT)
  - users.users_admin_access (ALL)
  - users.users_delete_super_admin (DELETE)
  - users.users_insert_system (INSERT)
  - users.users_select_self_or_admin (SELECT)
  - users.users_self_access (SELECT)
  - users.users_update_self (UPDATE)
  - volunteer_profiles.volunteer_ngo_access (SELECT)
  - volunteer_profiles.volunteer_self_access (ALL)
  - volunteer_registrations.volunteer_registrations_delete_own_or_super_admin (DELETE)
  - volunteer_registrations.volunteer_registrations_insert_own (INSERT)
  - volunteer_registrations.volunteer_registrations_select_own_or_admin (SELECT)
  - volunteer_registrations.volunteer_registrations_update_own (UPDATE)
  - volunteer_registrations.volunteer_registrations_update_own_or_admin (UPDATE)
  - volunteers.volunteers_delete_self_or_super_admin (DELETE)
  - volunteers.volunteers_insert_self (INSERT)
  - volunteers.volunteers_select_self_or_admin (SELECT)
  - volunteers.volunteers_update_self (UPDATE)

 ‚úì tests/lib/test-db-setup.test.ts (34 tests) 549ms
 ‚úì tests/lib/openapi-types.test.ts (18 tests) 35ms
 ‚úì tests/lib/email.test.ts (13 tests) 30ms
 ‚úì src/index.test.ts (1 test) 199ms
 ‚úì tests/routes/debug.test.ts (8 tests) 939ms
stdout | tests/otel/init.test.ts > OpenTelemetry Initialization > should initialize OTel SDK when OTEL_ENABLED is true
‚úì OpenTelemetry: Using console exporter (no OTLP endpoint configured)

stdout | tests/otel/init.test.ts > OpenTelemetry Initialization > should initialize OTel SDK when OTEL_ENABLED is true
‚úì OpenTelemetry: Initialized successfully
  Service: test-service
  Environment: development
  Exporter: console

stdout | tests/otel/init.test.ts > OpenTelemetry Initialization > should skip initialization when OTEL_ENABLED is false
‚äò OpenTelemetry: Disabled via OTEL_ENABLED=false

stdout | tests/otel/init.test.ts > OpenTelemetry Initialization > should handle initialization errors gracefully
‚úì OpenTelemetry: Using OTLP exporter (invalid://endpoint)

stdout | tests/otel/init.test.ts > OpenTelemetry Initialization > should handle initialization errors gracefully
‚úì OpenTelemetry: Initialized successfully
  Service: shovel-heroes-api
  Environment: development
  Exporter: otlp

stdout | tests/otel/init.test.ts > OpenTelemetry Initialization > should shutdown gracefully
‚úì OpenTelemetry: Using console exporter (no OTLP endpoint configured)

stdout | tests/otel/init.test.ts > OpenTelemetry Initialization > should shutdown gracefully
‚úì OpenTelemetry: Initialized successfully
  Service: shovel-heroes-api
  Environment: development
  Exporter: console

stdout | tests/otel/init.test.ts > OpenTelemetry Initialization > should shutdown gracefully
‚úì OpenTelemetry: Shutdown complete

 ‚úì tests/otel/init.test.ts (11 tests) 4326ms
   ‚úì OpenTelemetry Initialization > should initialize OTel SDK when OTEL_ENABLED is true  4044ms
stdout | process.<anonymous> (/home/thc1006/dev/shovel-heroes/packages/backend/src/otel/init.ts:148:15)
OpenTelemetry: Shutting down...
OpenTelemetry: Shutting down...
OpenTelemetry: Shutting down...

stdout | shutdownOTel (/home/thc1006/dev/shovel-heroes/packages/backend/src/otel/init.ts:180:13)
‚úì OpenTelemetry: Shutdown complete

stdout | shutdownOTel (/home/thc1006/dev/shovel-heroes/packages/backend/src/otel/init.ts:180:13)
‚úì OpenTelemetry: Shutdown complete


‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ Failed Suites 2 ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ

 FAIL  tests/integration/api.test.ts > API Integration Tests
Error: Failed to login: {"statusCode":500,"error":"error","message":"insert or update on table \"sessions\" violates foreign key constraint \"sessions_user_id_fkey\""}
 ‚ùØ tests/integration/api.test.ts:53:13
     51| 
     52|     if (loginResponse.statusCode !== 200) {
     53|       throw new Error(`Failed to login: ${loginResponse.body}`);
       |             ^
     54|     }
     55| 

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[1/134]‚éØ

 FAIL  tests/routes/admin.test.ts > Admin Routes
TypeError: (0 , buildApp) is not a function
 ‚ùØ tests/routes/admin.test.ts:14:17
     12| 
     13|   beforeAll(async () => {
     14|     app = await buildApp();
       |                 ^
     15| 
     16|     // Create test super admin

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[2/134]‚éØ

 FAIL  tests/routes/admin.test.ts > Admin Routes
TypeError: Cannot read properties of undefined (reading 'close')
 ‚ùØ tests/routes/admin.test.ts:91:15
     89|     await pool.query('DELETE FROM users WHERE id = ANY($1)', [[adminUs‚Ä¶
     90|     await pool.query('DELETE FROM audit_logs WHERE user_id = $1', [adm‚Ä¶
     91|     await app.close();
       |               ^
     92|   });
     93| 

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[3/134]‚éØ


‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ Failed Tests 131 ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ

 FAIL  tests/grids-post.test.ts > POST /grids > should create a new grid with valid data
AssertionError: expected '23.5000000' to be 23.5 // Object.is equality

[32m- Expected:[39m 
23.5

[31m+ Received:[39m 
"23.5000000"

 ‚ùØ tests/grids-post.test.ts:93:29
     91|     expect(data.name).toBe('Test Grid');
     92|     expect(data.grid_type).toBe('manpower');
     93|     expect(data.center_lat).toBe(23.5);
       |                             ^
     94|     expect(data.center_lng).toBe(121.5);
     95|     expect(data.volunteer_needed).toBe(10);

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[4/134]‚éØ

 FAIL  tests/integration.test.ts > Integration Tests - Full Workflow > Complete Disaster Response Workflow > should handle complete workflow: create disaster area ‚Üí create grid ‚Üí volunteer registration
AssertionError: expected { ‚Ä¶(8) } to match object { Object (name, center_lat, ...) }
(7 matching properties omitted from actual)

[32m- Expected[39m
[31m+ Received[39m

[2m  {[22m
[32m-   "center_lat": 24,[39m
[32m-   "center_lng": 121.5,[39m
[2m    "name": "Ëä±ËìÆÂú∞ÈúáÁÅΩÂçÄ",[22m
[2m  }[22m

 ‚ùØ tests/integration.test.ts:56:28
     54|       expect(disasterResponse.statusCode).toBe(201);
     55|       const disasterArea = disasterResponse.json();
     56|       expect(disasterArea).toMatchObject(disasterAreaPayload);
       |                            ^
     57|       expect(disasterArea.id).toBeDefined();
     58|       expect(disasterArea.created_at).toBeDefined();

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[5/134]‚éØ

 FAIL  tests/integration.test.ts > Integration Tests - Full Workflow > Row-Level Security (RLS) Tests > should enforce RLS policies across multiple users
error: column "user_id" of relation "volunteer_registrations" does not exist
 ‚ùØ ../../node_modules/pg/lib/client.js:545:17
 ‚ùØ tests/integration.test.ts:179:26
    177|       // User 1 creates a registration
    178|       const reg1 = await withUserId(pool, user1.id, async (client) => {
    179|         const { rows } = await client.query(
       |                          ^
    180|           `INSERT INTO volunteer_registrations (id, grid_id, user_id) ‚Ä¶
    181|           [grid.id, user1.id]
 ‚ùØ withUserId tests/helpers.ts:248:12
 ‚ùØ tests/integration.test.ts:178:20

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[6/134]‚éØ

 FAIL  tests/integration.test.ts > Integration Tests - Full Workflow > Row-Level Security (RLS) Tests > should apply RLS filtering when app.user_id is set
error: column "user_id" of relation "volunteer_registrations" does not exist
 ‚ùØ ../../node_modules/pg/lib/client.js:545:17
 ‚ùØ tests/integration.test.ts:217:9
    215|       // Create registration with user context
    216|       await withUserId(pool, user.id, async (client) => {
    217|         await client.query(
       |         ^
    218|           `INSERT INTO volunteer_registrations (id, grid_id, user_id) ‚Ä¶
    219|           [grid.id, user.id]
 ‚ùØ withUserId tests/helpers.ts:248:12
 ‚ùØ tests/integration.test.ts:216:7

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[7/134]‚éØ

 FAIL  tests/integration.test.ts > Integration Tests - Full Workflow > JWT Authentication Tests > should reject requests with invalid JWT
error: update or delete on table "volunteers" violates foreign key constraint "volunteer_registrations_volunteer_id_fkey" on table "volunteer_registrations"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ cleanDatabase tests/helpers.ts:121:5
    119| 
    120|   for (const table of tables) {
    121|     await pool.query(`DELETE FROM ${table}`);
       |     ^
    122|   }
    123| }
 ‚ùØ tests/integration.test.ts:27:5

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[8/134]‚éØ

 FAIL  tests/integration.test.ts > Integration Tests - Full Workflow > Error Handling Tests > should return 404 when updating non-existent disaster area
error: update or delete on table "users" violates foreign key constraint "volunteers_user_id_fkey" on table "volunteers"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ cleanDatabase tests/helpers.ts:121:5
    119| 
    120|   for (const table of tables) {
    121|     await pool.query(`DELETE FROM ${table}`);
       |     ^
    122|   }
    123| }
 ‚ùØ tests/integration.test.ts:27:5

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[9/134]‚éØ

 FAIL  tests/integration.test.ts > Integration Tests - Full Workflow > Error Handling Tests > should return 404 when deleting non-existent disaster area
AssertionError: expected 401 to be 404 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 404[39m
[31m+ 401[39m

 ‚ùØ tests/integration.test.ts:431:35
    429|       });
    430| 
    431|       expect(response.statusCode).toBe(404);
       |                                   ^
    432|     });
    433| 

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[10/134]‚éØ

 FAIL  tests/integration.test.ts > Integration Tests - Full Workflow > CRUD Operations Tests > Announcements > should create and list announcements
AssertionError: expected 400 to be 201 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 201[39m
[31m+ 400[39m

 ‚ùØ tests/integration.test.ts:473:43
    471|         });
    472| 
    473|         expect(createResponse.statusCode).toBe(201);
       |                                           ^
    474|         const created = createResponse.json();
    475|         expect(created).toMatchObject(payload);

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[11/134]‚éØ

 FAIL  tests/integration.test.ts > Integration Tests - Full Workflow > CRUD Operations Tests > Supply Donations > should create and list supply donations
AssertionError: expected 400 to be 201 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 201[39m
[31m+ 400[39m

 ‚ùØ tests/integration.test.ts:515:43
    513|         });
    514| 
    515|         expect(createResponse.statusCode).toBe(201);
       |                                           ^
    516|         const created = createResponse.json();
    517|         expect(created).toMatchObject(payload);

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[12/134]‚éØ

 FAIL  tests/integration.test.ts > Integration Tests - Full Workflow > CRUD Operations Tests > Grid Discussions > should create and list grid discussions
AssertionError: expected 400 to be 201 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 201[39m
[31m+ 400[39m

 ‚ùØ tests/integration.test.ts:553:43
    551|         });
    552| 
    553|         expect(createResponse.statusCode).toBe(201);
       |                                           ^
    554|         const created = createResponse.json();
    555|         expect(created.content).toBe(payload.content);

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[13/134]‚éØ

 FAIL  tests/integration.test.ts > Integration Tests - Full Workflow > Grid Update Tests > should update updated_at timestamp
AssertionError: expected 404 to be 200 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 200[39m
[31m+ 404[39m

 ‚ùØ tests/integration.test.ts:769:35
    767|       });
    768| 
    769|       expect(response.statusCode).toBe(200);
       |                                   ^
    770|       const updated = response.json();
    771| 

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[14/134]‚éØ

 FAIL  tests/integration/volunteer-registrations.test.ts > PUT /volunteer-registrations/:id - Status Updates > Authentication and Authorization > should return 404 when trying to update another user's registration
 FAIL  tests/integration/volunteer-registrations.test.ts > PUT /volunteer-registrations/:id - Status Updates > Validation > should return 400 when status is missing
 FAIL  tests/integration/volunteer-registrations.test.ts > PUT /volunteer-registrations/:id - Status Updates > Validation > should return 400 when status is invalid
 FAIL  tests/integration/volunteer-registrations.test.ts > PUT /volunteer-registrations/:id - Status Updates > Status Transitions - User (Owner) > should allow user to update pending ‚Üí confirmed
 FAIL  tests/integration/volunteer-registrations.test.ts > PUT /volunteer-registrations/:id - Status Updates > Status Transitions - User (Owner) > should allow user to update confirmed ‚Üí arrived
 FAIL  tests/integration/volunteer-registrations.test.ts > PUT /volunteer-registrations/:id - Status Updates > Status Transitions - User (Owner) > should allow user to update arrived ‚Üí completed
 FAIL  tests/integration/volunteer-registrations.test.ts > PUT /volunteer-registrations/:id - Status Updates > Status Transitions - User (Owner) > should allow user to cancel from pending status
 FAIL  tests/integration/volunteer-registrations.test.ts > PUT /volunteer-registrations/:id - Status Updates > Status Transitions - User (Owner) > should allow user to cancel from confirmed status
 FAIL  tests/integration/volunteer-registrations.test.ts > PUT /volunteer-registrations/:id - Status Updates > Status Transitions - User (Owner) > should allow user to cancel from arrived status
 FAIL  tests/integration/volunteer-registrations.test.ts > PUT /volunteer-registrations/:id - Status Updates > Status Transitions - User (Owner) > should allow user to cancel from completed status
 FAIL  tests/integration/volunteer-registrations.test.ts > PUT /volunteer-registrations/:id - Status Updates > Complete Status Flow > should allow complete flow: pending ‚Üí confirmed ‚Üí arrived ‚Üí completed
 FAIL  tests/integration/volunteer-registrations.test.ts > PUT /volunteer-registrations/:id - Status Updates > Updated Timestamp > should update updated_at timestamp on status change
 FAIL  tests/integration/volunteer-registrations.test.ts > PUT /volunteer-registrations/:id - Status Updates > Response Format > should return complete registration object on success
error: insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_volunteer_id_fkey"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ tests/integration/volunteer-registrations.test.ts:61:23
     59| 
     60|     // Create a fresh registration for each test
     61|     const regResult = await context.pool.query(
       |                       ^
     62|       'INSERT INTO volunteer_registrations (volunteer_id, grid_id, sta‚Ä¶
     63|       [volunteerId, gridId, 'pending']

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[15/134]‚éØ

 FAIL  tests/rls/grids.rls.test.ts > RLS Policies: grids table > SELECT policies > should allow unauthenticated users to view grids
error: column "center_lat" of relation "disaster_areas" does not exist
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ createRLSTestDisasterArea tests/rls/rls-test-framework.ts:158:20
    156|   }>
    157| ): Promise<any> {
    158|   const { rows } = await pool.query(
       |                    ^
    159|     `INSERT INTO disaster_areas (name, center_lat, center_lng, severit‚Ä¶
    160|      VALUES ($1, $2, $3, $4)
 ‚ùØ tests/rls/grids.rls.test.ts:45:28

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[16/134]‚éØ

 FAIL  tests/rls/grids.rls.test.ts > RLS Policies: grids table > SELECT policies > should allow all authenticated users to view grids
error: column "center_lat" of relation "disaster_areas" does not exist
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ createRLSTestDisasterArea tests/rls/rls-test-framework.ts:158:20
    156|   }>
    157| ): Promise<any> {
    158|   const { rows } = await pool.query(
       |                    ^
    159|     `INSERT INTO disaster_areas (name, center_lat, center_lng, severit‚Ä¶
    160|      VALUES ($1, $2, $3, $4)
 ‚ùØ tests/rls/grids.rls.test.ts:63:28

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[17/134]‚éØ

 FAIL  tests/rls/grids.rls.test.ts > RLS Policies: grids table > INSERT policies > should allow ngo_coordinator to insert grids
error: column "center_lat" of relation "disaster_areas" does not exist
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ createRLSTestDisasterArea tests/rls/rls-test-framework.ts:158:20
    156|   }>
    157| ): Promise<any> {
    158|   const { rows } = await pool.query(
       |                    ^
    159|     `INSERT INTO disaster_areas (name, center_lat, center_lng, severit‚Ä¶
    160|      VALUES ($1, $2, $3, $4)
 ‚ùØ tests/rls/grids.rls.test.ts:80:28

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[18/134]‚éØ

 FAIL  tests/rls/grids.rls.test.ts > RLS Policies: grids table > INSERT policies > should allow regional_admin to insert grids
error: column "center_lat" of relation "disaster_areas" does not exist
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ createRLSTestDisasterArea tests/rls/rls-test-framework.ts:158:20
    156|   }>
    157| ): Promise<any> {
    158|   const { rows } = await pool.query(
       |                    ^
    159|     `INSERT INTO disaster_areas (name, center_lat, center_lng, severit‚Ä¶
    160|      VALUES ($1, $2, $3, $4)
 ‚ùØ tests/rls/grids.rls.test.ts:95:28

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[19/134]‚éØ

 FAIL  tests/rls/grids.rls.test.ts > RLS Policies: grids table > INSERT policies > should prevent volunteer from inserting grids
error: column "center_lat" of relation "disaster_areas" does not exist
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ createRLSTestDisasterArea tests/rls/rls-test-framework.ts:158:20
    156|   }>
    157| ): Promise<any> {
    158|   const { rows } = await pool.query(
       |                    ^
    159|     `INSERT INTO disaster_areas (name, center_lat, center_lng, severit‚Ä¶
    160|      VALUES ($1, $2, $3, $4)
 ‚ùØ tests/rls/grids.rls.test.ts:109:28

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[20/134]‚éØ

 FAIL  tests/rls/grids.rls.test.ts > RLS Policies: grids table > INSERT policies > should prevent data_analyst from inserting grids
error: column "center_lat" of relation "disaster_areas" does not exist
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ createRLSTestDisasterArea tests/rls/rls-test-framework.ts:158:20
    156|   }>
    157| ): Promise<any> {
    158|   const { rows } = await pool.query(
       |                    ^
    159|     `INSERT INTO disaster_areas (name, center_lat, center_lng, severit‚Ä¶
    160|      VALUES ($1, $2, $3, $4)
 ‚ùØ tests/rls/grids.rls.test.ts:122:28

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[21/134]‚éØ

 FAIL  tests/rls/grids.rls.test.ts > RLS Policies: grids table > UPDATE policies > should allow super_admin to update grids
error: column "center_lat" of relation "disaster_areas" does not exist
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ createRLSTestDisasterArea tests/rls/rls-test-framework.ts:158:20
    156|   }>
    157| ): Promise<any> {
    158|   const { rows } = await pool.query(
       |                    ^
    159|     `INSERT INTO disaster_areas (name, center_lat, center_lng, severit‚Ä¶
    160|      VALUES ($1, $2, $3, $4)
 ‚ùØ tests/rls/grids.rls.test.ts:137:28

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[22/134]‚éØ

 FAIL  tests/rls/grids.rls.test.ts > RLS Policies: grids table > UPDATE policies > should allow ngo_coordinator to update grids
error: column "center_lat" of relation "disaster_areas" does not exist
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ createRLSTestDisasterArea tests/rls/rls-test-framework.ts:158:20
    156|   }>
    157| ): Promise<any> {
    158|   const { rows } = await pool.query(
       |                    ^
    159|     `INSERT INTO disaster_areas (name, center_lat, center_lng, severit‚Ä¶
    160|      VALUES ($1, $2, $3, $4)
 ‚ùØ tests/rls/grids.rls.test.ts:152:28

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[23/134]‚éØ

 FAIL  tests/rls/grids.rls.test.ts > RLS Policies: grids table > UPDATE policies > should prevent volunteer from updating grids
error: column "center_lat" of relation "disaster_areas" does not exist
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ createRLSTestDisasterArea tests/rls/rls-test-framework.ts:158:20
    156|   }>
    157| ): Promise<any> {
    158|   const { rows } = await pool.query(
       |                    ^
    159|     `INSERT INTO disaster_areas (name, center_lat, center_lng, severit‚Ä¶
    160|      VALUES ($1, $2, $3, $4)
 ‚ùØ tests/rls/grids.rls.test.ts:167:28

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[24/134]‚éØ

 FAIL  tests/rls/grids.rls.test.ts > RLS Policies: grids table > DELETE policies > should allow only super_admin to delete grids
error: column "center_lat" of relation "disaster_areas" does not exist
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ createRLSTestDisasterArea tests/rls/rls-test-framework.ts:158:20
    156|   }>
    157| ): Promise<any> {
    158|   const { rows } = await pool.query(
       |                    ^
    159|     `INSERT INTO disaster_areas (name, center_lat, center_lng, severit‚Ä¶
    160|      VALUES ($1, $2, $3, $4)
 ‚ùØ tests/rls/grids.rls.test.ts:183:28

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[25/134]‚éØ

 FAIL  tests/rls/grids.rls.test.ts > RLS Policies: grids table > DELETE policies > should prevent ngo_coordinator from deleting grids
error: column "center_lat" of relation "disaster_areas" does not exist
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ createRLSTestDisasterArea tests/rls/rls-test-framework.ts:158:20
    156|   }>
    157| ): Promise<any> {
    158|   const { rows } = await pool.query(
       |                    ^
    159|     `INSERT INTO disaster_areas (name, center_lat, center_lng, severit‚Ä¶
    160|      VALUES ($1, $2, $3, $4)
 ‚ùØ tests/rls/grids.rls.test.ts:198:28

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[26/134]‚éØ

 FAIL  tests/rls/grids.rls.test.ts > RLS Policies: grids table > DELETE policies > should prevent regional_admin from deleting grids
error: column "center_lat" of relation "disaster_areas" does not exist
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ createRLSTestDisasterArea tests/rls/rls-test-framework.ts:158:20
    156|   }>
    157| ): Promise<any> {
    158|   const { rows } = await pool.query(
       |                    ^
    159|     `INSERT INTO disaster_areas (name, center_lat, center_lng, severit‚Ä¶
    160|      VALUES ($1, $2, $3, $4)
 ‚ùØ tests/rls/grids.rls.test.ts:212:28

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[27/134]‚éØ

 FAIL  tests/rls/grids.rls.test.ts > RLS Policies: grids table > Grid Manager scenarios > should allow grid manager to be assigned
error: column "center_lat" of relation "disaster_areas" does not exist
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ createRLSTestDisasterArea tests/rls/rls-test-framework.ts:158:20
    156|   }>
    157| ): Promise<any> {
    158|   const { rows } = await pool.query(
       |                    ^
    159|     `INSERT INTO disaster_areas (name, center_lat, center_lng, severit‚Ä¶
    160|      VALUES ($1, $2, $3, $4)
 ‚ùØ tests/rls/grids.rls.test.ts:229:28

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[28/134]‚éØ

 FAIL  tests/rls/grids.rls.test.ts > RLS Policies: grids table > Grid Manager scenarios > should verify is_grid_manager helper function works
error: column "center_lat" of relation "disaster_areas" does not exist
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ createRLSTestDisasterArea tests/rls/rls-test-framework.ts:158:20
    156|   }>
    157| ): Promise<any> {
    158|   const { rows } = await pool.query(
       |                    ^
    159|     `INSERT INTO disaster_areas (name, center_lat, center_lng, severit‚Ä¶
    160|      VALUES ($1, $2, $3, $4)
 ‚ùØ tests/rls/grids.rls.test.ts:246:28

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[29/134]‚éØ

 FAIL  tests/routes/announcements.test.ts > Announcements CRUD - TDD > POST /announcements > Success Cases > should create announcement with valid data and return 201
AssertionError: expected 500 to be 201 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 201[39m
[31m+ 500[39m

 ‚ùØ tests/routes/announcements.test.ts:52:37
     50| 
     51|         // Assert
     52|         expect(response.statusCode).toBe(201);
       |                                     ^
     53|         const created = response.json();
     54|         expect(created.title).toBe('Important Update');

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[30/134]‚éØ

 FAIL  tests/routes/announcements.test.ts > Announcements CRUD - TDD > POST /announcements > Success Cases > should create announcement with default values
AssertionError: expected 500 to be 201 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 201[39m
[31m+ 500[39m

 ‚ùØ tests/routes/announcements.test.ts:85:37
     83| 
     84|         // Assert
     85|         expect(response.statusCode).toBe(201);
       |                                     ^
     86|         const created = response.json();
     87|         expect(created.priority).toBe('normal'); // Default priority

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[31/134]‚éØ

 FAIL  tests/routes/announcements.test.ts > Announcements CRUD - TDD > POST /announcements > Success Cases > should create unpublished announcement
AssertionError: expected 500 to be 201 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 201[39m
[31m+ 500[39m

 ‚ùØ tests/routes/announcements.test.ts:114:37
    112| 
    113|         // Assert
    114|         expect(response.statusCode).toBe(201);
       |                                     ^
    115|         const created = response.json();
    116|         expect(created.published).toBe(false);

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[32/134]‚éØ

 FAIL  tests/routes/announcements.test.ts > Announcements CRUD - TDD > POST /announcements > Success Cases > should create announcement with all priority levels
AssertionError: expected 500 to be 201 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 201[39m
[31m+ 500[39m

 ‚ùØ tests/routes/announcements.test.ts:140:39
    138|           });
    139| 
    140|           expect(response.statusCode).toBe(201);
       |                                       ^
    141|           const created = response.json();
    142|           expect(created.priority).toBe(priority);

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[33/134]‚éØ

 FAIL  tests/routes/announcements.test.ts > Announcements CRUD - TDD > GET /announcements > Success Cases > should return only published announcements (public endpoint)
AssertionError: expected [] to have a length of 1 but got +0

[32m- Expected[39m
[31m+ Received[39m

[32m- 1[39m
[31m+ 0[39m

 ‚ùØ tests/routes/announcements.test.ts:354:31
    352|         expect(response.statusCode).toBe(200);
    353|         const announcements = response.json();
    354|         expect(announcements).toHaveLength(1);
       |                               ^
    355|         expect(announcements[0].title).toBe('Published Announcement');
    356|         expect(announcements[0].published).toBe(true);

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[34/134]‚éØ

 FAIL  tests/routes/announcements.test.ts > Announcements CRUD - TDD > GET /announcements > Success Cases > should return announcements without authentication (public endpoint)
AssertionError: expected [] to have a length of 3 but got +0

[32m- Expected[39m
[31m+ Received[39m

[32m- 3[39m
[31m+ 0[39m

 ‚ùØ tests/routes/announcements.test.ts:388:31
    386|         expect(response.statusCode).toBe(200);
    387|         const announcements = response.json();
    388|         expect(announcements).toHaveLength(3);
       |                               ^
    389|         expect(announcements[0]).toHaveProperty('id');
    390|         expect(announcements[0]).toHaveProperty('title');

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[35/134]‚éØ

 FAIL  tests/routes/announcements.test.ts > Announcements CRUD - TDD > GET /announcements > Success Cases > should order announcements by is_pinned DESC, order ASC, created_at DESC
AssertionError: expected [] to have a length of 2 but got +0

[32m- Expected[39m
[31m+ Received[39m

[32m- 2[39m
[31m+ 0[39m

 ‚ùØ tests/routes/announcements.test.ts:437:31
    435|         expect(response.statusCode).toBe(200);
    436|         const announcements = response.json();
    437|         expect(announcements).toHaveLength(2);
       |                               ^
    438|         // Most recent should be first (when is_pinned and order are e‚Ä¶
    439|         expect(announcements[0].title).toBe('Newer Regular Announcemen‚Ä¶

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[36/134]‚éØ

 FAIL  tests/routes/announcements.test.ts > Announcements CRUD - TDD > GET /announcements > Success Cases > should limit results to 100 announcements
error: insert or update on table "announcements" violates foreign key constraint "announcements_author_id_fkey"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ tests/routes/announcements.test.ts:449:11
    447|         // Create 105 announcements directly in DB
    448|         for (let i = 1; i <= 105; i++) {
    449|           await pool.query(
       |           ^
    450|             `INSERT INTO announcements (id, title, content, published,‚Ä¶
    451|              VALUES (gen_random_uuid(), $1, $2, $3, $4)`,

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[37/134]‚éØ

 FAIL  tests/routes/announcements.test.ts > Announcements CRUD - TDD > PUT /announcements/:id > Success Cases > should update announcement and return 200
 FAIL  tests/routes/announcements.test.ts > Announcements CRUD - TDD > DELETE /announcements/:id > Success Cases > should delete announcement successfully and return 204
error: update or delete on table "users" violates foreign key constraint "volunteers_user_id_fkey" on table "volunteers"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ cleanDatabase tests/helpers.ts:121:5
    119| 
    120|   for (const table of tables) {
    121|     await pool.query(`DELETE FROM ${table}`);
       |     ^
    122|   }
    123| }
 ‚ùØ tests/routes/announcements.test.ts:23:5

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[38/134]‚éØ

 FAIL  tests/routes/announcements.test.ts > Announcements CRUD - TDD > PUT /announcements/:id > Success Cases > should support partial updates
AssertionError: expected 404 to be 200 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 200[39m
[31m+ 404[39m

 ‚ùØ tests/routes/announcements.test.ts:543:37
    541| 
    542|         // Assert
    543|         expect(response.statusCode).toBe(200);
       |                                     ^
    544|         const updated = response.json();
    545|         expect(updated.priority).toBe('urgent');

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[39/134]‚éØ

 FAIL  tests/routes/announcements.test.ts > Announcements CRUD - TDD > PUT /announcements/:id > Success Cases > should update published status
AssertionError: expected 500 to be 200 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 200[39m
[31m+ 500[39m

 ‚ùØ tests/routes/announcements.test.ts:581:37
    579| 
    580|         // Assert
    581|         expect(response.statusCode).toBe(200);
       |                                     ^
    582|         const updated = response.json();
    583|         expect(updated.published).toBe(true);

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[40/134]‚éØ

 FAIL  tests/routes/announcements.test.ts > Announcements CRUD - TDD > Edge Cases & Security > should sanitize SQL injection attempts
AssertionError: expected 500 to be 201 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 201[39m
[31m+ 500[39m

 ‚ùØ tests/routes/announcements.test.ts:852:35
    850| 
    851|       // Assert - Should create successfully with sanitized input
    852|       expect(response.statusCode).toBe(201);
       |                                   ^
    853| 
    854|       // Verify announcements table still exists

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[41/134]‚éØ

 FAIL  tests/routes/announcements.test.ts > Announcements CRUD - TDD > Edge Cases & Security > should handle concurrent updates correctly
AssertionError: expected 500 to be 200 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 200[39m
[31m+ 500[39m

 ‚ùØ tests/routes/announcements.test.ts:897:36
    895| 
    896|       // Assert - Both should succeed
    897|       expect(response1.statusCode).toBe(200);
       |                                    ^
    898|       expect(response2.statusCode).toBe(200);
    899|     });

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[42/134]‚éØ

 FAIL  tests/routes/grid-discussions.test.ts > Grid Discussions Routes - TDD > POST /grid-discussions > Success Cases > should create grid discussion with valid data and return 201
AssertionError: expected 500 to be 201 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 201[39m
[31m+ 500[39m

 ‚ùØ tests/routes/grid-discussions.test.ts:54:37
     52| 
     53|         // Assert
     54|         expect(response.statusCode).toBe(201);
       |                                     ^
     55|         const created = response.json();
     56|         expect(created.grid_id).toBe(grid.id);

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[43/134]‚éØ

 FAIL  tests/routes/grid-discussions.test.ts > Grid Discussions Routes - TDD > POST /grid-discussions > Success Cases > should handle multiple discussions on same grid
error: duplicate key value violates unique constraint "users_email_key"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ createTestUser tests/helpers.ts:135:20
    133|   const role = data?.role || 'volunteer'; // Default role for test use‚Ä¶
    134| 
    135|   const { rows } = await pool.query(
       |                    ^
    136|     `INSERT INTO users (id, display_name, email, phone_number, role, s‚Ä¶
    137|      VALUES ($1, $2, $3, $4, $5, 'active')
 ‚ùØ tests/routes/grid-discussions.test.ts:102:23

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[44/134]‚éØ

 FAIL  tests/routes/grid-discussions.test.ts > Grid Discussions Routes - TDD > POST /grid-discussions > Authentication & Authorization > should return 401 when auth token is expired
AssertionError: expected 400 to be 401 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 401[39m
[31m+ 400[39m

 ‚ùØ tests/routes/grid-discussions.test.ts:349:37
    347| 
    348|         // Assert
    349|         expect(response.statusCode).toBe(401);
       |                                     ^
    350|       });
    351|     });

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[45/134]‚éØ

 FAIL  tests/routes/grid-discussions.test.ts > Grid Discussions Routes - TDD > GET /grid-discussions > Success Cases > should return all grid discussions without authentication (public endpoint)
AssertionError: expected [] to have a length of 3 but got +0

[32m- Expected[39m
[31m+ Received[39m

[32m- 3[39m
[31m+ 0[39m

 ‚ùØ tests/routes/grid-discussions.test.ts:403:29
    401|         expect(response.statusCode).toBe(200);
    402|         const discussions = response.json();
    403|         expect(discussions).toHaveLength(3);
       |                             ^
    404|         expect(discussions[0]).toHaveProperty('id');
    405|         expect(discussions[0]).toHaveProperty('grid_id');

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[46/134]‚éØ

 FAIL  tests/routes/grid-discussions.test.ts > Grid Discussions Routes - TDD > GET /grid-discussions > Success Cases > should order discussions by created_at DESC
AssertionError: expected [] to have a length of 2 but got +0

[32m- Expected[39m
[31m+ Received[39m

[32m- 2[39m
[31m+ 0[39m

 ‚ùØ tests/routes/grid-discussions.test.ts:450:29
    448|         expect(response.statusCode).toBe(200);
    449|         const discussions = response.json();
    450|         expect(discussions).toHaveLength(2);
       |                             ^
    451|         // Most recent should be first
    452|         expect(discussions[0].content).toBe('Second message');

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[47/134]‚éØ

 FAIL  tests/routes/grid-discussions.test.ts > Grid Discussions Routes - TDD > GET /grid-discussions > Success Cases > should limit results to 200 discussions
error: column "content" of relation "grid_discussions" does not exist
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ tests/routes/grid-discussions.test.ts:465:11
    463|         // Create 205 discussions directly in DB
    464|         for (let i = 1; i <= 205; i++) {
    465|           await pool.query(
       |           ^
    466|             `INSERT INTO grid_discussions (id, grid_id, user_id, conte‚Ä¶
    467|              VALUES (gen_random_uuid(), $1, $2, $3)`,

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[48/134]‚éØ

 FAIL  tests/routes/grid-discussions.test.ts > Grid Discussions Routes - TDD > GET /grid-discussions > Success Cases > should include discussions from multiple grids
AssertionError: expected [] to have a length of 2 but got +0

[32m- Expected[39m
[31m+ Received[39m

[32m- 2[39m
[31m+ 0[39m

 ‚ùØ tests/routes/grid-discussions.test.ts:522:29
    520|         expect(response.statusCode).toBe(200);
    521|         const discussions = response.json();
    522|         expect(discussions).toHaveLength(2);
       |                             ^
    523|         const gridIds = discussions.map((d: any) => d.grid_id);
    524|         expect(gridIds).toContain(grid1.id);

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[49/134]‚éØ

 FAIL  tests/routes/grid-discussions.test.ts > Grid Discussions Routes - TDD > Edge Cases & Security > should handle Unicode characters in content
AssertionError: expected 400 to be 201 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 201[39m
[31m+ 400[39m

 ‚ùØ tests/routes/grid-discussions.test.ts:553:35
    551| 
    552|       // Assert
    553|       expect(response.statusCode).toBe(201);
       |                                   ^
    554|       const created = response.json();
    555|       expect(created.content).toBe('ÈÄôË£°ÈúÄË¶ÅÊõ¥Â§öÂøóÂ∑•ÔºÅüòä Let\'s help together! ‚Ä¶

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[50/134]‚éØ

 FAIL  tests/routes/grid-discussions.test.ts > Grid Discussions Routes - TDD > Edge Cases & Security > should sanitize SQL injection attempts
AssertionError: expected 400 to be 201 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 201[39m
[31m+ 400[39m

 ‚ùØ tests/routes/grid-discussions.test.ts:610:35
    608| 
    609|       // Assert - Should create successfully with sanitized input
    610|       expect(response.statusCode).toBe(201);
       |                                   ^
    611|       const created = response.json();
    612|       expect(created.content).toBe("'; DROP TABLE grid_discussions; --‚Ä¶

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[51/134]‚éØ

 FAIL  tests/routes/grid-discussions.test.ts > Grid Discussions Routes - TDD > Edge Cases & Security > should handle concurrent posts efficiently
AssertionError: expected 400 to be 201 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 201[39m
[31m+ 400[39m

 ‚ùØ tests/routes/grid-discussions.test.ts:647:37
    645|       // Assert - All should succeed
    646|       responses.forEach((response, i) => {
    647|         expect(response.statusCode).toBe(201);
       |                                     ^
    648|         const created = response.json();
    649|         expect(created.content).toBe(`Concurrent message ${i + 1}`);
 ‚ùØ tests/routes/grid-discussions.test.ts:646:17

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[52/134]‚éØ

 FAIL  tests/routes/grid-discussions.test.ts > Grid Discussions Routes - TDD > Edge Cases & Security > should handle XSS attempts in content
AssertionError: expected 400 to be 201 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 201[39m
[31m+ 400[39m

 ‚ùØ tests/routes/grid-discussions.test.ts:683:35
    681| 
    682|       // Assert - Should store as-is (sanitization should happen on fr‚Ä¶
    683|       expect(response.statusCode).toBe(201);
       |                                   ^
    684|       const created = response.json();
    685|       expect(created.content).toBe('<script>alert("XSS")</script>');

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[53/134]‚éØ

 FAIL  tests/routes/grids.test.ts > Grids CRUD - TDD London School > POST /grids > Success Cases > should create grid with valid minimal data and return 201
AssertionError: expected { ‚Ä¶(19) } to match object { code: 'A-1', ‚Ä¶(5) }
(13 matching properties omitted from actual)

[32m- Expected[39m
[31m+ Received[39m

[2m  {[22m
[2m    "area_id": "8e64912d-c47f-4e19-a4ab-e08cb3f056cd",[22m
[32m-   "center_lat": 23.5,[39m
[32m-   "center_lng": 121.5,[39m
[31m+   "center_lat": "23.5000000",[39m
[31m+   "center_lng": "121.5000000",[39m
[2m    "code": "A-1",[22m
[2m    "grid_type": "manpower",[22m
[2m    "name": "Test Grid A-1",[22m
[2m  }[22m

 ‚ùØ tests/routes/grids.test.ts:60:25
     58|         expect(response.statusCode).toBe(201);
     59|         const created = response.json();
     60|         expect(created).toMatchObject(payload);
       |                         ^
     61|         expect(created.id).toBeDefined();
     62|         expect(created.created_at).toBeDefined();

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[54/134]‚éØ

 FAIL  tests/routes/grids.test.ts > Grids CRUD - TDD London School > POST /grids > Success Cases > should create grid with all optional fields
AssertionError: expected { ‚Ä¶(19) } to match object { code: 'B-2', ‚Ä¶(12) }
(6 matching properties omitted from actual)

[32m- Expected[39m
[31m+ Received[39m

[33m@@ -4,12 +4,12 @@[39m
[2m      "east": 122.001,[22m
[2m      "north": 24.001,[22m
[2m      "south": 23.999,[22m
[2m      "west": 121.999,[22m
[2m    },[22m
[32m-   "center_lat": 24,[39m
[32m-   "center_lng": 122,[39m
[31m+   "center_lat": "24.0000000",[39m
[31m+   "center_lng": "122.0000000",[39m
[2m    "code": "B-2",[22m
[2m    "description": "‰∏ªË¶ÅÁâ©Ë≥áÈõÜÊï£‰∏≠ÂøÉ",[22m
[2m    "grid_type": "supply_storage",[22m
[2m    "meeting_point": "ÂÖâÂæ©ÈÑâÂÖ¨ÊâÄÂâçÂª£Â†¥",[22m
[2m    "name": "Full Featured Grid",[22m

 ‚ùØ tests/routes/grids.test.ts:113:25
    111|         expect(response.statusCode).toBe(201);
    112|         const created = response.json();
    113|         expect(created).toMatchObject(payload);
       |                         ^
    114|         expect(created.bounds).toEqual(payload.bounds);
    115|         expect(created.supplies_needed).toEqual(payload.supplies_neede‚Ä¶

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[55/134]‚éØ

 FAIL  tests/routes/grids.test.ts > Grids CRUD - TDD London School > POST /grids > Success Cases > should create grid with null area_id (not linked to disaster area)
AssertionError: expected 400 to be 201 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 201[39m
[31m+ 400[39m

 ‚ùØ tests/routes/grids.test.ts:144:37
    142| 
    143|         // Assert
    144|         expect(response.statusCode).toBe(201);
       |                                     ^
    145|         const created = response.json();
    146|         expect(created.area_id).toBeNull();

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[56/134]‚éØ

 FAIL  tests/routes/grids.test.ts > Grids CRUD - TDD London School > POST /grids > Validation Failures > should return 400 when code is missing
AssertionError: expected undefined to be 'bad_request' // Object.is equality

[32m- Expected:[39m 
"bad_request"

[31m+ Received:[39m 
undefined

 ‚ùØ tests/routes/grids.test.ts:177:29
    175|         expect(response.statusCode).toBe(400);
    176|         const error = response.json();
    177|         expect(error.error).toBe('bad_request');
       |                             ^
    178|         expect(error.detail).toBeDefined();
    179|       });

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[57/134]‚éØ

 FAIL  tests/routes/grids.test.ts > Grids CRUD - TDD London School > POST /grids > Validation Failures > should return 400 when grid_type is invalid
AssertionError: expected undefined to be 'bad_request' // Object.is equality

[32m- Expected:[39m 
"bad_request"

[31m+ Received:[39m 
undefined

 ‚ùØ tests/routes/grids.test.ts:208:29
    206|         expect(response.statusCode).toBe(400);
    207|         const error = response.json();
    208|         expect(error.error).toBe('bad_request');
       |                             ^
    209|       });
    210| 

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[58/134]‚éØ

 FAIL  tests/routes/grids.test.ts > Grids CRUD - TDD London School > POST /grids > Authentication & Authorization > should return 401 when auth token is expired
AssertionError: expected 201 to be 401 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 401[39m
[31m+ 201[39m

 ‚ùØ tests/routes/grids.test.ts:407:37
    405| 
    406|         // Assert
    407|         expect(response.statusCode).toBe(401);
       |                                     ^
    408|       });
    409|     });

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[59/134]‚éØ

 FAIL  tests/routes/grids.test.ts > Grids CRUD - TDD London School > POST /grids > Duplicate Code Handling > should return 409 when grid code already exists
AssertionError: expected 201 to be 409 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 409[39m
[31m+ 201[39m

 ‚ùØ tests/routes/grids.test.ts:461:37
    459| 
    460|         // Assert
    461|         expect(response.statusCode).toBe(409);
       |                                     ^
    462|         const error = response.json();
    463|         expect(error.error).toBe('conflict');

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[60/134]‚éØ

 FAIL  tests/routes/grids.test.ts > Grids CRUD - TDD London School > POST /grids > Foreign Key Constraints > should return 400 or 404 when area_id references non-existent disaster area
error: update or delete on table "users" violates foreign key constraint "volunteers_user_id_fkey" on table "volunteers"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ cleanDatabase tests/helpers.ts:121:5
    119| 
    120|   for (const table of tables) {
    121|     await pool.query(`DELETE FROM ${table}`);
       |     ^
    122|   }
    123| }
 ‚ùØ tests/routes/grids.test.ts:26:5

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[61/134]‚éØ

 FAIL  tests/routes/grids.test.ts > Grids CRUD - TDD London School > GET /grids > Success Cases > should return all grids without authentication (public endpoint)
AssertionError: expected [ { ‚Ä¶(16) }, { ‚Ä¶(16) }, ‚Ä¶(3) ] to have a length of 3 but got 5

[32m- Expected[39m
[31m+ Received[39m

[32m- 3[39m
[31m+ 5[39m

 ‚ùØ tests/routes/grids.test.ts:536:23
    534|         expect(response.statusCode).toBe(200);
    535|         const grids = response.json();
    536|         expect(grids).toHaveLength(3);
       |                       ^
    537|         expect(grids[0].code).toBeDefined();
    538|         expect(grids[0].name).toBeDefined();

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[62/134]‚éØ

 FAIL  tests/routes/grids.test.ts > Grids CRUD - TDD London School > GET /grids > Success Cases > should filter grids by area_id query parameter
AssertionError: expected [ { ‚Ä¶(16) } ] to have a length of 2 but got 1

[32m- Expected[39m
[31m+ Received[39m

[32m- 2[39m
[31m+ 1[39m

 ‚ùØ tests/routes/grids.test.ts:560:23
    558|         expect(response.statusCode).toBe(200);
    559|         const grids = response.json();
    560|         expect(grids).toHaveLength(2);
       |                       ^
    561|         expect(grids.every((g: any) => g.area_id === area1.id)).toBe(t‚Ä¶
    562|       });

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[63/134]‚éØ

 FAIL  tests/routes/grids.test.ts > Grids CRUD - TDD London School > GET /grids > Success Cases > should return grids ordered by code
AssertionError: expected null to be 'A-1' // Object.is equality

[32m- Expected:[39m 
"A-1"

[31m+ Received:[39m 
null

 ‚ùØ tests/routes/grids.test.ts:581:31
    579|         expect(response.statusCode).toBe(200);
    580|         const grids = response.json();
    581|         expect(grids[0].code).toBe('A-1');
       |                               ^
    582|         expect(grids[1].code).toBe('B-2');
    583|         expect(grids[2].code).toBe('C-3');

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[64/134]‚éØ

 FAIL  tests/routes/grids.test.ts > Grids CRUD - TDD London School > GET /grids > Success Cases > should limit results to 100 grids
AssertionError: expected [ { ‚Ä¶(16) }, { ‚Ä¶(16) }, ‚Ä¶(12) ] to have a length of 100 but got 14

[32m- Expected[39m
[31m+ Received[39m

[32m- 100[39m
[31m+ 14[39m

 ‚ùØ tests/routes/grids.test.ts:608:23
    606|         expect(response.statusCode).toBe(200);
    607|         const grids = response.json();
    608|         expect(grids).toHaveLength(100); // Should limit to 100
       |                       ^
    609|       });
    610| 

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[65/134]‚éØ

 FAIL  tests/routes/grids.test.ts > Grids CRUD - TDD London School > GET /grids > Query Parameter Validation > should return 400 when area_id is not a valid UUID
AssertionError: expected 200 to be 400 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 400[39m
[31m+ 200[39m

 ‚ùØ tests/routes/grids.test.ts:674:37
    672| 
    673|         // Assert
    674|         expect(response.statusCode).toBe(400);
       |                                     ^
    675|         const error = response.json();
    676|         expect(error.error).toBe('bad_request');

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[66/134]‚éØ

 FAIL  tests/routes/grids.test.ts > Grids CRUD - TDD London School > PUT /grids/:id > Success Cases > should update grid with valid data and return 200
AssertionError: expected null to be 'ORIG-1' // Object.is equality

[32m- Expected:[39m 
"ORIG-1"

[31m+ Received:[39m 
null

 ‚ùØ tests/routes/grids.test.ts:736:30
    734|         expect(updated.volunteer_needed).toBe(updatePayload.volunteer_‚Ä¶
    735|         expect(updated.description).toBe(updatePayload.description);
    736|         expect(updated.code).toBe('ORIG-1'); // Unchanged
       |                              ^
    737|         expect(updated.updated_at).not.toBe(grid.updated_at);
    738|       });

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[67/134]‚éØ

 FAIL  tests/routes/grids.test.ts > Grids CRUD - TDD London School > PUT /grids/:id > Success Cases > should support partial updates (only update provided fields)
AssertionError: expected +0 to be 10 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 10[39m
[31m+ 0[39m

 ‚ùØ tests/routes/grids.test.ts:772:42
    770|         expect(updated.status).toBe('open'); // Updated
    771|         expect(updated.name).toBe('Original Name'); // Unchanged
    772|         expect(updated.volunteer_needed).toBe(10); // Unchanged
       |                                          ^
    773|       });
    774| 

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[68/134]‚éØ

 FAIL  tests/routes/grids.test.ts > Grids CRUD - TDD London School > PUT /grids/:id > Validation Failures > should return 400 when status has invalid value
 FAIL  tests/routes/grids.test.ts > Grids CRUD - TDD London School > PUT /grids/:id > Validation Failures > should return 400 when bounds format is invalid
error: update or delete on table "volunteers" violates foreign key constraint "volunteer_registrations_volunteer_id_fkey" on table "volunteer_registrations"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ cleanDatabase tests/helpers.ts:121:5
    119| 
    120|   for (const table of tables) {
    121|     await pool.query(`DELETE FROM ${table}`);
       |     ^
    122|   }
    123| }
 ‚ùØ tests/routes/grids.test.ts:26:5

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[69/134]‚éØ

 FAIL  tests/routes/grids.test.ts > Grids CRUD - TDD London School > DELETE /grids/:id > Success Cases > should cascade delete supply_donations when grid is deleted
error: column "name" of relation "supply_donations" does not exist
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ tests/routes/grids.test.ts:1162:9
    1160| 
    1161|         // Create supply donations
    1162|         await pool.query(
       |         ^
    1163|           `INSERT INTO supply_donations (id, grid_id, name, quantity, ‚Ä¶
    1164|            VALUES (gen_random_uuid(), $1, $2, $3, $4, $5)`,

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[70/134]‚éØ

 FAIL  tests/routes/grids.test.ts > Grids CRUD - TDD London School > DELETE /grids/:id > Success Cases > should cascade delete grid_discussions when grid is deleted
error: column "content" of relation "grid_discussions" does not exist
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ tests/routes/grids.test.ts:1209:9
    1207| 
    1208|         // Create grid discussions
    1209|         await pool.query(
       |         ^
    1210|           `INSERT INTO grid_discussions (id, grid_id, user_id, content)
    1211|            VALUES (gen_random_uuid(), $1, $2, $3)`,

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[71/134]‚éØ

 FAIL  tests/routes/supply-donations.test.ts > Supply Donations CRUD - TDD > POST /supply-donations > Success Cases > should create supply donation with valid data and return 201
AssertionError: expected 500 to be 201 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 201[39m
[31m+ 500[39m

 ‚ùØ tests/routes/supply-donations.test.ts:58:37
     56| 
     57|         // Assert
     58|         expect(response.statusCode).toBe(201);
       |                                     ^
     59|         const created = response.json();
     60|         expect(created.grid_id).toBe(grid.id);

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[72/134]‚éØ

 FAIL  tests/routes/supply-donations.test.ts > Supply Donations CRUD - TDD > POST /supply-donations > Success Cases > should create supply donation without optional donor_contact
AssertionError: expected 500 to be 201 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 201[39m
[31m+ 500[39m

 ‚ùØ tests/routes/supply-donations.test.ts:97:37
     95| 
     96|         // Assert
     97|         expect(response.statusCode).toBe(201);
       |                                     ^
     98|         const created = response.json();
     99|         expect(created.donor_contact).toBeNull();

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[73/134]‚éØ

 FAIL  tests/routes/supply-donations.test.ts > Supply Donations CRUD - TDD > GET /supply-donations > Success Cases > should return all supply donations without authentication (public endpoint)
AssertionError: expected [] to have a length of 3 but got +0

[32m- Expected[39m
[31m+ Received[39m

[32m- 3[39m
[31m+ 0[39m

 ‚ùØ tests/routes/supply-donations.test.ts:390:27
    388|         expect(response.statusCode).toBe(200);
    389|         const donations = response.json();
    390|         expect(donations).toHaveLength(3);
       |                           ^
    391|         expect(donations[0]).toHaveProperty('id');
    392|         expect(donations[0]).toHaveProperty('grid_id');

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[74/134]‚éØ

 FAIL  tests/routes/supply-donations.test.ts > Supply Donations CRUD - TDD > GET /supply-donations > Success Cases > should order donations by created_at DESC
AssertionError: expected [] to have a length of 2 but got +0

[32m- Expected[39m
[31m+ Received[39m

[32m- 2[39m
[31m+ 0[39m

 ‚ùØ tests/routes/supply-donations.test.ts:445:27
    443|         expect(response.statusCode).toBe(200);
    444|         const donations = response.json();
    445|         expect(donations).toHaveLength(2);
       |                           ^
    446|         expect(donations[0].donor_name).toBe('Second Donor'); // Most ‚Ä¶
    447|         expect(donations[1].donor_name).toBe('First Donor');

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[75/134]‚éØ

 FAIL  tests/routes/supply-donations.test.ts > Supply Donations CRUD - TDD > GET /supply-donations > Success Cases > should limit results to 200 donations
 FAIL  tests/routes/supply-donations.test.ts > Supply Donations CRUD - TDD > Edge Cases & Security > should handle Unicode characters in text fields
error: update or delete on table "users" violates foreign key constraint "volunteers_user_id_fkey" on table "volunteers"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ cleanDatabase tests/helpers.ts:121:5
    119| 
    120|   for (const table of tables) {
    121|     await pool.query(`DELETE FROM ${table}`);
       |     ^
    122|   }
    123| }
 ‚ùØ tests/routes/supply-donations.test.ts:25:5

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[76/134]‚éØ

 FAIL  tests/routes/supply-donations.test.ts > Supply Donations CRUD - TDD > PUT /supply-donations/:id > Success Cases > should update supply donation status and return 200
AssertionError: expected 500 to be 200 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 200[39m
[31m+ 500[39m

 ‚ùØ tests/routes/supply-donations.test.ts:517:37
    515| 
    516|         // Assert
    517|         expect(response.statusCode).toBe(200);
       |                                     ^
    518|         const updated = response.json();
    519|         expect(updated.status).toBe('confirmed');

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[77/134]‚éØ

 FAIL  tests/routes/supply-donations.test.ts > Supply Donations CRUD - TDD > PUT /supply-donations/:id > Success Cases > should update quantity and notes
AssertionError: expected 500 to be 200 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 200[39m
[31m+ 500[39m

 ‚ùØ tests/routes/supply-donations.test.ts:559:37
    557| 
    558|         // Assert
    559|         expect(response.statusCode).toBe(200);
       |                                     ^
    560|         const updated = response.json();
    561|         expect(updated.quantity).toBe(150);

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[78/134]‚éØ

 FAIL  tests/routes/supply-donations.test.ts > Supply Donations CRUD - TDD > PUT /supply-donations/:id > Success Cases > should support partial updates
AssertionError: expected 500 to be 200 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 200[39m
[31m+ 500[39m

 ‚ùØ tests/routes/supply-donations.test.ts:600:37
    598| 
    599|         // Assert
    600|         expect(response.statusCode).toBe(200);
       |                                     ^
    601|         const updated = response.json();
    602|         expect(updated.status).toBe('delivered');

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[79/134]‚éØ

 FAIL  tests/routes/supply-donations.test.ts > Supply Donations CRUD - TDD > DELETE /supply-donations/:id > Success Cases > should delete supply donation successfully and return 204
AssertionError: expected 404 to be 204 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 204[39m
[31m+ 404[39m

 ‚ùØ tests/routes/supply-donations.test.ts:763:37
    761| 
    762|         // Assert
    763|         expect(response.statusCode).toBe(204);
       |                                     ^
    764|         expect(response.body).toBe('');
    765| 

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[80/134]‚éØ

 FAIL  tests/routes/supply-donations.test.ts > Supply Donations CRUD - TDD > Edge Cases & Security > should handle concurrent updates correctly
AssertionError: expected 500 to be 200 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 200[39m
[31m+ 500[39m

 ‚ùØ tests/routes/supply-donations.test.ts:853:36
    851| 
    852|       // Assert - Both should succeed
    853|       expect(response1.statusCode).toBe(200);
       |                                    ^
    854|       expect(response2.statusCode).toBe(200);
    855| 

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[81/134]‚éØ

 FAIL  tests/routes/users.test.ts > Users Routes - TDD > GET /users > Success Cases > should return all users without authentication (public endpoint)
AssertionError: expected [ { ‚Ä¶(5) }, { ‚Ä¶(5) }, { ‚Ä¶(5) }, ‚Ä¶(1) ] to have a length of 3 but got 4

[32m- Expected[39m
[31m+ Received[39m

[32m- 3[39m
[31m+ 4[39m

 ‚ùØ tests/routes/users.test.ts:61:23
     59|         expect(response.statusCode).toBe(200);
     60|         const users = response.json();
     61|         expect(users).toHaveLength(3);
       |                       ^
     62|         expect(users[0]).toHaveProperty('id');
     63|         expect(users[0]).toHaveProperty('name');

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[82/134]‚éØ

 FAIL  tests/routes/users.test.ts > Users Routes - TDD > GET /users > Success Cases > should limit results to 100 users
AssertionError: expected [ { ‚Ä¶(5) }, { ‚Ä¶(5) }, { ‚Ä¶(5) }, ‚Ä¶(1) ] to have a length of 100 but got 4

[32m- Expected[39m
[31m+ Received[39m

[32m- 100[39m
[31m+ 4[39m

 ‚ùØ tests/routes/users.test.ts:90:23
     88|         expect(response.statusCode).toBe(200);
     89|         const users = response.json();
     90|         expect(users).toHaveLength(100); // Should limit to 100
       |                       ^
     91|       });
     92| 

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[83/134]‚éØ

 FAIL  tests/routes/users.test.ts > Users Routes - TDD > GET /users > Edge Cases > should handle Unicode characters in names
AssertionError: expected 'Test User' to be 'ÁéãÂ∞èÊòé üòä' // Object.is equality

Expected: [32m"ÁéãÂ∞èÊòé üòä"[39m
Received: [31m"Test User"[39m

 ‚ùØ tests/routes/users.test.ts:133:31
    131|         expect(response.statusCode).toBe(200);
    132|         const users = response.json();
    133|         expect(users[0].name).toBe('ÁéãÂ∞èÊòé üòä');
       |                               ^
    134|       });
    135| 

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[84/134]‚éØ

 FAIL  tests/routes/volunteer-registrations.test.ts > Volunteer Registrations CRUD - TDD > POST /volunteer-registrations > Success Cases > should create volunteer registration with valid data and return 201
error: insert or update on table "volunteers" violates foreign key constraint "volunteers_user_id_fkey"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ tests/routes/volunteer-registrations.test.ts:41:41
     39| 
     40|         // Create volunteer record for the volunteer user
     41|         const { rows: volunteerRows } = await pool.query(
       |                                         ^
     42|           `INSERT INTO volunteers (user_id, name, email, phone, status)
     43|            VALUES ($1, $2, $3, $4, 'available')

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[85/134]‚éØ

 FAIL  tests/routes/volunteer-registrations.test.ts > Volunteer Registrations CRUD - TDD > POST /volunteer-registrations > Success Cases > should allow user to register themselves as volunteer
error: insert or update on table "volunteers" violates foreign key constraint "volunteers_user_id_fkey"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ tests/routes/volunteer-registrations.test.ts:83:41
     81| 
     82|         // Create volunteer record for the user
     83|         const { rows: volunteerRows } = await pool.query(
       |                                         ^
     84|           `INSERT INTO volunteers (user_id, name, email, phone, status)
     85|            VALUES ($1, $2, $3, $4, 'available')

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[86/134]‚éØ

 FAIL  tests/routes/volunteer-registrations.test.ts > Volunteer Registrations CRUD - TDD > POST /volunteer-registrations > Success Cases > should allow multiple volunteers to register for same grid
error: insert or update on table "volunteers" violates foreign key constraint "volunteers_user_id_fkey"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ tests/routes/volunteer-registrations.test.ts:123:36
    121| 
    122|         // Create volunteer records
    123|         const { rows: vol1Rows } = await pool.query(
       |                                    ^
    124|           `INSERT INTO volunteers (user_id, name, email, phone, status)
    125|            VALUES ($1, $2, $3, $4, 'available') RETURNING id`,

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[87/134]‚éØ

 FAIL  tests/routes/volunteer-registrations.test.ts > Volunteer Registrations CRUD - TDD > GET /volunteer-registrations > Success Cases > should return empty array when no registrations exist
 FAIL  tests/routes/volunteer-registrations.test.ts > Volunteer Registrations CRUD - TDD > PUT /volunteer-registrations/:id > Validation Failures > should return 400 when status has invalid value
error: update or delete on table "users" violates foreign key constraint "volunteers_user_id_fkey" on table "volunteers"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ cleanDatabase tests/helpers.ts:121:5
    119| 
    120|   for (const table of tables) {
    121|     await pool.query(`DELETE FROM ${table}`);
       |     ^
    122|   }
    123| }
 ‚ùØ tests/routes/volunteer-registrations.test.ts:26:5

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[88/134]‚éØ

 FAIL  tests/routes/volunteer-registrations.test.ts > Volunteer Registrations CRUD - TDD > GET /volunteer-registrations > Success Cases > should return all registrations without authentication (public endpoint)
error: insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_grid_id_fkey"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ createTestVolunteerRegistration tests/helpers.ts:210:20
    208| 
    209|   // Now create the volunteer registration with the volunteer_id
    210|   const { rows } = await pool.query(
       |                    ^
    211|     `INSERT INTO volunteer_registrations (
    212|       id, volunteer_id, grid_id, disaster_area_id, status, notes,
 ‚ùØ tests/routes/volunteer-registrations.test.ts:385:11

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[89/134]‚éØ

 FAIL  tests/routes/volunteer-registrations.test.ts > Volunteer Registrations CRUD - TDD > GET /volunteer-registrations > Success Cases > should order registrations by created_at DESC
error: insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_grid_id_fkey"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ createTestVolunteerRegistration tests/helpers.ts:210:20
    208| 
    209|   // Now create the volunteer registration with the volunteer_id
    210|   const { rows } = await pool.query(
       |                    ^
    211|     `INSERT INTO volunteer_registrations (
    212|       id, volunteer_id, grid_id, disaster_area_id, status, notes,
 ‚ùØ tests/routes/volunteer-registrations.test.ts:412:22

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[90/134]‚éØ

 FAIL  tests/routes/volunteer-registrations.test.ts > Volunteer Registrations CRUD - TDD > GET /volunteer-registrations > Success Cases > should limit results to 200 registrations
error: insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_grid_id_fkey"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ createTestVolunteerRegistration tests/helpers.ts:210:20
    208| 
    209|   // Now create the volunteer registration with the volunteer_id
    210|   const { rows } = await pool.query(
       |                    ^
    211|     `INSERT INTO volunteer_registrations (
    212|       id, volunteer_id, grid_id, disaster_area_id, status, notes,
 ‚ùØ tests/routes/volunteer-registrations.test.ts:443:11

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[91/134]‚éØ

 FAIL  tests/routes/volunteer-registrations.test.ts > Volunteer Registrations CRUD - TDD > PUT /volunteer-registrations/:id > Success Cases > should update registration status and return 200
error: insert or update on table "volunteers" violates foreign key constraint "volunteers_user_id_fkey"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ createTestVolunteerRegistration tests/helpers.ts:199:39
    197|     } else {
    198|       // Create a volunteer record for this user
    199|       const { rows: newVolunteers } = await pool.query(
       |                                       ^
    200|         `INSERT INTO volunteers (id, user_id, name, email, phone, stat‚Ä¶
    201|          VALUES (gen_random_uuid(), $1, 'Test Volunteer', $2, '0912-34‚Ä¶
 ‚ùØ tests/routes/volunteer-registrations.test.ts:470:30

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[92/134]‚éØ

 FAIL  tests/routes/volunteer-registrations.test.ts > Volunteer Registrations CRUD - TDD > PUT /volunteer-registrations/:id > Success Cases > should allow volunteer to update their own registration
error: insert or update on table "volunteers" violates foreign key constraint "volunteers_user_id_fkey"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ createTestVolunteerRegistration tests/helpers.ts:199:39
    197|     } else {
    198|       // Create a volunteer record for this user
    199|       const { rows: newVolunteers } = await pool.query(
       |                                       ^
    200|         `INSERT INTO volunteers (id, user_id, name, email, phone, stat‚Ä¶
    201|          VALUES (gen_random_uuid(), $1, 'Test Volunteer', $2, '0912-34‚Ä¶
 ‚ùØ tests/routes/volunteer-registrations.test.ts:497:30

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[93/134]‚éØ

 FAIL  tests/routes/volunteer-registrations.test.ts > Volunteer Registrations CRUD - TDD > PUT /volunteer-registrations/:id > Success Cases > should support all valid status transitions
error: insert or update on table "volunteers" violates foreign key constraint "volunteers_user_id_fkey"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ createTestVolunteerRegistration tests/helpers.ts:199:39
    197|     } else {
    198|       // Create a volunteer record for this user
    199|       const { rows: newVolunteers } = await pool.query(
       |                                       ^
    200|         `INSERT INTO volunteers (id, user_id, name, email, phone, stat‚Ä¶
    201|          VALUES (gen_random_uuid(), $1, 'Test Volunteer', $2, '0912-34‚Ä¶
 ‚ùØ tests/routes/volunteer-registrations.test.ts:527:32

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[94/134]‚éØ

 FAIL  tests/routes/volunteer-registrations.test.ts > Volunteer Registrations CRUD - TDD > PUT /volunteer-registrations/:id > Authentication & Authorization > should prevent user from updating other volunteers registrations
error: insert or update on table "volunteers" violates foreign key constraint "volunteers_user_id_fkey"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ createTestVolunteerRegistration tests/helpers.ts:199:39
    197|     } else {
    198|       // Create a volunteer record for this user
    199|       const { rows: newVolunteers } = await pool.query(
       |                                       ^
    200|         `INSERT INTO volunteers (id, user_id, name, email, phone, stat‚Ä¶
    201|          VALUES (gen_random_uuid(), $1, 'Test Volunteer', $2, '0912-34‚Ä¶
 ‚ùØ tests/routes/volunteer-registrations.test.ts:622:30

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[95/134]‚éØ

 FAIL  tests/routes/volunteer-registrations.test.ts > Volunteer Registrations CRUD - TDD > DELETE /volunteer-registrations/:id > Success Cases > should delete registration successfully and return 204
error: insert or update on table "volunteers" violates foreign key constraint "volunteers_user_id_fkey"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ createTestVolunteerRegistration tests/helpers.ts:199:39
    197|     } else {
    198|       // Create a volunteer record for this user
    199|       const { rows: newVolunteers } = await pool.query(
       |                                       ^
    200|         `INSERT INTO volunteers (id, user_id, name, email, phone, stat‚Ä¶
    201|          VALUES (gen_random_uuid(), $1, 'Test Volunteer', $2, '0912-34‚Ä¶
 ‚ùØ tests/routes/volunteer-registrations.test.ts:648:30

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[96/134]‚éØ

 FAIL  tests/routes/volunteer-registrations.test.ts > Volunteer Registrations CRUD - TDD > DELETE /volunteer-registrations/:id > Success Cases > should allow volunteer to cancel their own registration
error: insert or update on table "volunteers" violates foreign key constraint "volunteers_user_id_fkey"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ createTestVolunteerRegistration tests/helpers.ts:199:39
    197|     } else {
    198|       // Create a volunteer record for this user
    199|       const { rows: newVolunteers } = await pool.query(
       |                                       ^
    200|         `INSERT INTO volunteers (id, user_id, name, email, phone, stat‚Ä¶
    201|          VALUES (gen_random_uuid(), $1, 'Test Volunteer', $2, '0912-34‚Ä¶
 ‚ùØ tests/routes/volunteer-registrations.test.ts:678:30

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[97/134]‚éØ

 FAIL  tests/routes/volunteer-registrations.test.ts > Volunteer Registrations CRUD - TDD > DELETE /volunteer-registrations/:id > Authentication & Authorization > should prevent user from deleting other volunteers registrations
error: insert or update on table "volunteers" violates foreign key constraint "volunteers_user_id_fkey"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ createTestVolunteerRegistration tests/helpers.ts:199:39
    197|     } else {
    198|       // Create a volunteer record for this user
    199|       const { rows: newVolunteers } = await pool.query(
       |                                       ^
    200|         `INSERT INTO volunteers (id, user_id, name, email, phone, stat‚Ä¶
    201|          VALUES (gen_random_uuid(), $1, 'Test Volunteer', $2, '0912-34‚Ä¶
 ‚ùØ tests/routes/volunteer-registrations.test.ts:736:30

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[98/134]‚éØ

 FAIL  tests/routes/volunteer-registrations.test.ts > Volunteer Registrations CRUD - TDD > Edge Cases & Security > should handle duplicate registration attempts
error: insert or update on table "volunteers" violates foreign key constraint "volunteers_user_id_fkey"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ tests/routes/volunteer-registrations.test.ts:805:33
    803| 
    804|       // Create volunteer record
    805|       const { rows: volRows } = await pool.query(
       |                                 ^
    806|         `INSERT INTO volunteers (user_id, name, email, phone, status)
    807|          VALUES ($1, $2, $3, $4, 'available') RETURNING id`,

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[99/134]‚éØ

 FAIL  tests/routes/volunteer-registrations.test.ts > Volunteer Registrations CRUD - TDD > Edge Cases & Security > should handle rapid status updates
error: insert or update on table "volunteers" violates foreign key constraint "volunteers_user_id_fkey"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ createTestVolunteerRegistration tests/helpers.ts:199:39
    197|     } else {
    198|       // Create a volunteer record for this user
    199|       const { rows: newVolunteers } = await pool.query(
       |                                       ^
    200|         `INSERT INTO volunteers (id, user_id, name, email, phone, stat‚Ä¶
    201|          VALUES (gen_random_uuid(), $1, 'Test Volunteer', $2, '0912-34‚Ä¶
 ‚ùØ tests/routes/volunteer-registrations.test.ts:848:28

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[100/134]‚éØ

 FAIL  tests/routes/volunteers.test.ts > Volunteers Routes - TDD > GET /volunteers > Success Cases > should return volunteers with basic information
error: insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_grid_id_fkey"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ createTestVolunteerRegistration tests/helpers.ts:210:20
    208| 
    209|   // Now create the volunteer registration with the volunteer_id
    210|   const { rows } = await pool.query(
       |                    ^
    211|     `INSERT INTO volunteer_registrations (
    212|       id, volunteer_id, grid_id, disaster_area_id, status, notes,
 ‚ùØ tests/routes/volunteers.test.ts:59:9

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[101/134]‚éØ

 FAIL  tests/routes/volunteers.test.ts > Volunteers Routes - TDD > GET /volunteers > Success Cases > should mask phone numbers when can_view_phone is false (no auth)
error: insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_grid_id_fkey"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ tests/routes/volunteers.test.ts:91:9
     89|         ).then(r => r.rows[0].id);
     90| 
     91|         await pool.query(
       |         ^
     92|           `INSERT INTO volunteer_registrations (grid_id, volunteer_id)‚Ä¶
     93|           [grid.id, volunteerId]

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[102/134]‚éØ

 FAIL  tests/routes/volunteers.test.ts > Volunteers Routes - TDD > GET /volunteers > Success Cases > should show full phone numbers when authenticated as admin (can_view_phone is true)
AssertionError: expected false to be true // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- true[39m
[31m+ false[39m

 ‚ùØ tests/routes/volunteers.test.ts:142:39
    140|         expect(response.statusCode).toBe(200);
    141|         const result = response.json();
    142|         expect(result.can_view_phone).toBe(true);
       |                                       ^
    143|         expect(result.data[0].volunteer_phone).toBeDefined();
    144|         // Admins see FULL phone numbers (not masked)

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[103/134]‚éØ

 FAIL  tests/routes/volunteers.test.ts > Volunteers Routes - TDD > GET /volunteers > Success Cases > should filter volunteers by grid_id
error: insert or update on table "volunteers" violates foreign key constraint "volunteers_user_id_fkey"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ createTestVolunteerRegistration tests/helpers.ts:199:39
    197|     } else {
    198|       // Create a volunteer record for this user
    199|       const { rows: newVolunteers } = await pool.query(
       |                                       ^
    200|         `INSERT INTO volunteers (id, user_id, name, email, phone, stat‚Ä¶
    201|          VALUES (gen_random_uuid(), $1, 'Test Volunteer', $2, '0912-34‚Ä¶
 ‚ùØ tests/routes/volunteers.test.ts:159:9

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[104/134]‚éØ

 FAIL  tests/routes/volunteers.test.ts > Volunteers Routes - TDD > GET /volunteers > Success Cases > should support pagination with limit and offset
error: insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_grid_id_fkey"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ createTestVolunteerRegistration tests/helpers.ts:210:20
    208| 
    209|   // Now create the volunteer registration with the volunteer_id
    210|   const { rows } = await pool.query(
       |                    ^
    211|     `INSERT INTO volunteer_registrations (
    212|       id, volunteer_id, grid_id, disaster_area_id, status, notes,
 ‚ùØ tests/routes/volunteers.test.ts:185:11

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[105/134]‚éØ

 FAIL  tests/routes/volunteers.test.ts > Volunteers Routes - TDD > GET /volunteers > Success Cases > should include status_counts when include_counts=true
error: insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_grid_id_fkey"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ createTestVolunteerRegistration tests/helpers.ts:210:20
    208| 
    209|   // Now create the volunteer registration with the volunteer_id
    210|   const { rows } = await pool.query(
       |                    ^
    211|     `INSERT INTO volunteer_registrations (
    212|       id, volunteer_id, grid_id, disaster_area_id, status, notes,
 ‚ùØ tests/routes/volunteers.test.ts:208:9

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[106/134]‚éØ

 FAIL  tests/routes/volunteers.test.ts > Volunteers Routes - TDD > GET /volunteers > Success Cases > should not include status_counts when include_counts=false
error: insert or update on table "volunteers" violates foreign key constraint "volunteers_user_id_fkey"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ createTestVolunteerRegistration tests/helpers.ts:199:39
    197|     } else {
    198|       // Create a volunteer record for this user
    199|       const { rows: newVolunteers } = await pool.query(
       |                                       ^
    200|         `INSERT INTO volunteers (id, user_id, name, email, phone, stat‚Ä¶
    201|          VALUES (gen_random_uuid(), $1, 'Test Volunteer', $2, '0912-34‚Ä¶
 ‚ùØ tests/routes/volunteers.test.ts:233:9

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[107/134]‚éØ

 FAIL  tests/routes/volunteers.test.ts > Volunteers Routes - TDD > GET /volunteers > Success Cases > should order volunteers by created_at DESC
 FAIL  tests/routes/volunteers.test.ts > Volunteers Routes - TDD > GET /volunteers > RBAC - Phone Number Visibility > Grid Manager Users > should handle grid with no manager (no permission)
error: update or delete on table "users" violates foreign key constraint "volunteers_user_id_fkey" on table "volunteers"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ cleanDatabase tests/helpers.ts:121:5
    119| 
    120|   for (const table of tables) {
    121|     await pool.query(`DELETE FROM ${table}`);
       |     ^
    122|   }
    123| }
 ‚ùØ tests/routes/volunteers.test.ts:26:5

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[108/134]‚éØ

 FAIL  tests/routes/volunteers.test.ts > Volunteers Routes - TDD > GET /volunteers > Phone Visibility for Null Values > should handle null phone numbers gracefully
error: insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_grid_id_fkey"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ tests/routes/volunteers.test.ts:358:9
    356|         ).then(r => r.rows[0].id);
    357| 
    358|         await pool.query(
       |         ^
    359|           `INSERT INTO volunteer_registrations (grid_id, volunteer_id)‚Ä¶
    360|           [grid.id, volunteerId]

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[109/134]‚éØ

 FAIL  tests/routes/volunteers.test.ts > Volunteers Routes - TDD > GET /volunteers > Edge Cases > should handle volunteers with empty string names as anonymous
error: insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_volunteer_id_fkey"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ tests/routes/volunteers.test.ts:392:9
    390|         ).then(r => r.rows[0].id);
    391| 
    392|         await pool.query(
       |         ^
    393|           `INSERT INTO volunteer_registrations (grid_id, volunteer_id)‚Ä¶
    394|           [grid.id, volunteerId]

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[110/134]‚éØ

 FAIL  tests/routes/volunteers.test.ts > Volunteers Routes - TDD > GET /volunteers > Edge Cases > should handle very large result sets with pagination
error: insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_grid_id_fkey"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ createTestVolunteerRegistration tests/helpers.ts:210:20
    208| 
    209|   // Now create the volunteer registration with the volunteer_id
    210|   const { rows } = await pool.query(
       |                    ^
    211|     `INSERT INTO volunteer_registrations (
    212|       id, volunteer_id, grid_id, disaster_area_id, status, notes,
 ‚ùØ tests/routes/volunteers.test.ts:418:11

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[111/134]‚éØ

 FAIL  tests/routes/volunteers.test.ts > Volunteers Routes - TDD > GET /volunteers > Edge Cases > should handle concurrent requests efficiently
error: insert or update on table "volunteers" violates foreign key constraint "volunteers_user_id_fkey"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ createTestVolunteerRegistration tests/helpers.ts:199:39
    197|     } else {
    198|       // Create a volunteer record for this user
    199|       const { rows: newVolunteers } = await pool.query(
       |                                       ^
    200|         `INSERT INTO volunteers (id, user_id, name, email, phone, stat‚Ä¶
    201|          VALUES (gen_random_uuid(), $1, 'Test Volunteer', $2, '0912-34‚Ä¶
 ‚ùØ tests/routes/volunteers.test.ts:440:9

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[112/134]‚éØ

 FAIL  tests/routes/volunteers.test.ts > Volunteers Routes - TDD > GET /volunteers > RBAC - Phone Number Visibility > Unauthenticated Users > should NOT see phone numbers for unauthenticated requests
error: insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_grid_id_fkey"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ tests/routes/volunteers.test.ts:514:11
    512|           ).then(r => r.rows[0].id);
    513| 
    514|           await pool.query(
       |           ^
    515|             `INSERT INTO volunteer_registrations (grid_id, volunteer_i‚Ä¶
    516|             [grid.id, volunteerId]

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[113/134]‚éØ

 FAIL  tests/routes/volunteers.test.ts > Volunteers Routes - TDD > GET /volunteers > RBAC - Phone Number Visibility > Admin Users > should see full phone numbers for super_admin
AssertionError: expected false to be true // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- true[39m
[31m+ false[39m

 ‚ùØ tests/routes/volunteers.test.ts:565:39
    563|           expect(response.statusCode).toBe(200);
    564|           const body = response.json();
    565|           expect(body.can_view_phone).toBe(true);
       |                                       ^
    566|           expect(body.data[0].volunteer_phone).toBe('0912345678');
    567|         });

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[114/134]‚éØ

 FAIL  tests/routes/volunteers.test.ts > Volunteers Routes - TDD > GET /volunteers > RBAC - Phone Number Visibility > Admin Users > should see full phone numbers for regional_admin
AssertionError: expected false to be true // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- true[39m
[31m+ false[39m

 ‚ùØ tests/routes/volunteers.test.ts:600:39
    598|           expect(response.statusCode).toBe(200);
    599|           const body = response.json();
    600|           expect(body.can_view_phone).toBe(true);
       |                                       ^
    601|           expect(body.data[0].volunteer_phone).toBe('0912345678');
    602|         });

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[115/134]‚éØ

 FAIL  tests/routes/volunteers.test.ts > Volunteers Routes - TDD > GET /volunteers > RBAC - Phone Number Visibility > Grid Manager Users > should see phone numbers for volunteers in THEIR grids
error: insert or update on table "grids" violates foreign key constraint "grids_grid_manager_id_fkey"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ setGridManager tests/routes/volunteers.test.ts:496:9
    494|       // Helper function to set grid manager
    495|       async function setGridManager(pool: any, gridId: string, manager‚Ä¶
    496|         await pool.query(
       |         ^
    497|           `UPDATE grids SET grid_manager_id = $1 WHERE id = $2`,
    498|           [managerId, gridId]
 ‚ùØ tests/routes/volunteers.test.ts:614:11

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[116/134]‚éØ

 FAIL  tests/routes/volunteers.test.ts > Volunteers Routes - TDD > GET /volunteers > RBAC - Phone Number Visibility > Grid Manager Users > should NOT see phone numbers for volunteers in OTHER grids
error: insert or update on table "volunteer_registrations" violates foreign key constraint "volunteer_registrations_volunteer_id_fkey"
 ‚ùØ ../../node_modules/pg-pool/index.js:45:11
 ‚ùØ tests/routes/volunteers.test.ts:661:11
    659|           ).then(r => r.rows[0].id);
    660| 
    661|           await pool.query(
       |           ^
    662|             `INSERT INTO volunteer_registrations (grid_id, volunteer_i‚Ä¶
    663|             [grid2.id, volunteerId]

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ[117/134]‚éØ


 Test Files  13 failed | 7 passed (20)
      Tests  131 failed | 232 passed | 33 skipped (396)
   Start at  15:18:49
   Duration  13.39s (transform 2.42s, setup 0ms, collect 21.75s, tests 34.06s, environment 4ms, prepare 6.20s)

npm error Lifecycle script `test` failed with error:
npm error code 1
npm error path /home/thc1006/dev/shovel-heroes/packages/backend
npm error workspace shovel-backend@0.1.0
npm error location /home/thc1006/dev/shovel-heroes/packages/backend
npm error command failed
npm error command sh -c vitest run
